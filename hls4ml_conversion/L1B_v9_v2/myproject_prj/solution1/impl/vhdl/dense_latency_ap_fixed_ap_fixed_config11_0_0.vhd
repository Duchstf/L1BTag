-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_latency_ap_fixed_ap_fixed_config11_0_0 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_2_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_3_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_4_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_5_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_6_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_7_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_8_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_9_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of dense_latency_ap_fixed_ap_fixed_config11_0_0 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv24_47 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000111";
    constant ap_const_lv24_FFFF3E : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111100111110";
    constant ap_const_lv24_EB : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000011101011";
    constant ap_const_lv23_7FFFCC : STD_LOGIC_VECTOR (22 downto 0) := "11111111111111111001100";
    constant ap_const_lv24_A7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010100111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv16_14 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_227 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln708_s_reg_556 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln708_4_reg_561 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln708_6_reg_566 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_26_reg_571 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln703_fu_415_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_reg_576 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_119_fu_426_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_119_reg_581 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_data_0_V_read : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_data_3_V_read : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_data_4_V_read : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_data_5_V_read : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_data_6_V_read : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_data_7_V_read : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_data_8_V_read : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_port_reg_data_9_V_read : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_166_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_66_fu_231_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1118_70_fu_251_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1118_74_fu_370_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_166_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_167_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_67_fu_236_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln1118_73_fu_256_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_167_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_166_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln708_s_fu_241_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_167_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln_fu_271_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln1118_fu_279_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln1118_s_fu_289_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln1118_fu_283_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1118_65_fu_297_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln1118_22_fu_301_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln1118_37_fu_320_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_68_fu_328_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal shl_ln1118_38_fu_338_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1118_23_fu_332_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln1118_69_fu_346_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln1118_24_fu_350_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln708_24_fu_356_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln1118_42_fu_375_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1118_43_fu_387_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1118_78_fu_395_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_77_fu_383_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln1118_28_fu_399_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln708_1_fu_366_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln708_fu_317_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_fu_307_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_118_fu_421_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_71_fu_432_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1118_39_fu_436_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1118_39_fu_436_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln1118_72_fu_444_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln1118_25_fu_448_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1118_71_fu_432_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln1118_26_fu_454_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln1118_40_fu_470_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln1118_41_fu_482_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln1118_76_fu_490_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln1118_75_fu_478_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln1118_27_fu_494_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln708_25_fu_500_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln708_3_fu_514_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_5_fu_460_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_115_fu_517_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_116_fu_523_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln708_2_fu_510_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_120_fu_534_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_121_fu_540_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_117_fu_529_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_122_fu_545_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln703_119_reg_581 <= add_ln703_119_fu_426_p2;
                add_ln703_reg_576 <= add_ln703_fu_415_p2;
                trunc_ln708_26_reg_571 <= sub_ln1118_28_fu_399_p2(21 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                ap_port_reg_data_0_V_read <= data_0_V_read;
                ap_port_reg_data_3_V_read <= data_3_V_read;
                ap_port_reg_data_4_V_read <= data_4_V_read;
                ap_port_reg_data_5_V_read <= data_5_V_read;
                ap_port_reg_data_6_V_read <= data_6_V_read;
                ap_port_reg_data_7_V_read <= data_7_V_read;
                ap_port_reg_data_8_V_read <= data_8_V_read;
                ap_port_reg_data_9_V_read <= data_9_V_read;
                trunc_ln708_s_reg_556 <= trunc_ln708_s_fu_241_p1(22 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then
                reg_227 <= grp_fu_166_p2(23 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln708_4_reg_561 <= grp_fu_166_p2(23 downto 8);
                trunc_ln708_6_reg_566 <= grp_fu_167_p2(23 downto 8);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state3, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln703_115_fu_517_p2 <= std_logic_vector(signed(sext_ln708_3_fu_514_p1) + signed(reg_227));
    add_ln703_116_fu_523_p2 <= std_logic_vector(unsigned(trunc_ln708_5_fu_460_p4) + unsigned(add_ln703_115_fu_517_p2));
    add_ln703_117_fu_529_p2 <= std_logic_vector(unsigned(add_ln703_reg_576) + unsigned(add_ln703_116_fu_523_p2));
    add_ln703_118_fu_421_p2 <= std_logic_vector(unsigned(trunc_ln708_4_reg_561) + unsigned(sext_ln708_fu_317_p1));
    add_ln703_119_fu_426_p2 <= std_logic_vector(unsigned(trunc_ln_fu_307_p4) + unsigned(add_ln703_118_fu_421_p2));
    add_ln703_120_fu_534_p2 <= std_logic_vector(signed(sext_ln708_2_fu_510_p1) + signed(ap_const_lv16_14));
    add_ln703_121_fu_540_p2 <= std_logic_vector(unsigned(trunc_ln708_6_reg_566) + unsigned(add_ln703_120_fu_534_p2));
    add_ln703_122_fu_545_p2 <= std_logic_vector(unsigned(add_ln703_119_reg_581) + unsigned(add_ln703_121_fu_540_p2));
    add_ln703_fu_415_p2 <= std_logic_vector(unsigned(reg_227) + unsigned(sext_ln708_1_fu_366_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_ce, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(unsigned(add_ln703_117_fu_529_p2) + unsigned(add_ln703_122_fu_545_p2));

    grp_fu_166_p0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state2, sext_ln1118_66_fu_231_p1, sext_ln1118_70_fu_251_p1, sext_ln1118_74_fu_370_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_166_p0 <= sext_ln1118_74_fu_370_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_166_p0 <= sext_ln1118_70_fu_251_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_166_p0 <= sext_ln1118_66_fu_231_p1(16 - 1 downto 0);
        else 
            grp_fu_166_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_166_p1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_166_p1 <= ap_const_lv24_EB(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_166_p1 <= ap_const_lv24_FFFF3E(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_166_p1 <= ap_const_lv24_47(10 - 1 downto 0);
        else 
            grp_fu_166_p1 <= "XXXXXXXXXX";
        end if; 
    end process;

    grp_fu_166_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(grp_fu_166_p0) * signed(grp_fu_166_p1))), 24));

    grp_fu_167_p0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, sext_ln1118_67_fu_236_p1, sext_ln1118_73_fu_256_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_167_p0 <= sext_ln1118_73_fu_256_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_167_p0 <= sext_ln1118_67_fu_236_p1(16 - 1 downto 0);
        else 
            grp_fu_167_p0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_167_p1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_167_p1 <= ap_const_lv24_A7(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_167_p1 <= ap_const_lv23_7FFFCC(10 - 1 downto 0);
        else 
            grp_fu_167_p1 <= "XXXXXXXXXX";
        end if; 
    end process;

    grp_fu_167_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(grp_fu_167_p0) * signed(grp_fu_167_p1))), 24));
        sext_ln1118_65_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_s_fu_289_p3),24));

        sext_ln1118_66_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_1_V_read),24));

        sext_ln1118_67_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_2_V_read),23));

        sext_ln1118_68_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_37_fu_320_p3),23));

        sext_ln1118_69_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_38_fu_338_p3),23));

        sext_ln1118_70_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_port_reg_data_4_V_read),24));

    sext_ln1118_71_fu_432_p0 <= ap_port_reg_data_5_V_read;
        sext_ln1118_71_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_71_fu_432_p0),24));

        sext_ln1118_72_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_39_fu_436_p3),24));

        sext_ln1118_73_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_port_reg_data_6_V_read),24));

        sext_ln1118_74_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_port_reg_data_7_V_read),24));

        sext_ln1118_75_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_40_fu_470_p3),23));

        sext_ln1118_76_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_41_fu_482_p3),23));

        sext_ln1118_77_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_42_fu_375_p3),22));

        sext_ln1118_78_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_43_fu_387_p3),22));

        sext_ln1118_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_271_p3),24));

        sext_ln708_1_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_24_fu_356_p4),16));

        sext_ln708_2_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_25_fu_500_p4),16));

        sext_ln708_3_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_26_reg_571),16));

        sext_ln708_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_s_reg_556),16));

    shl_ln1118_37_fu_320_p3 <= (ap_port_reg_data_3_V_read & ap_const_lv6_0);
    shl_ln1118_38_fu_338_p3 <= (ap_port_reg_data_3_V_read & ap_const_lv1_0);
    shl_ln1118_39_fu_436_p1 <= ap_port_reg_data_5_V_read;
    shl_ln1118_39_fu_436_p3 <= (shl_ln1118_39_fu_436_p1 & ap_const_lv7_0);
    shl_ln1118_40_fu_470_p3 <= (ap_port_reg_data_8_V_read & ap_const_lv6_0);
    shl_ln1118_41_fu_482_p3 <= (ap_port_reg_data_8_V_read & ap_const_lv3_0);
    shl_ln1118_42_fu_375_p3 <= (ap_port_reg_data_9_V_read & ap_const_lv5_0);
    shl_ln1118_43_fu_387_p3 <= (ap_port_reg_data_9_V_read & ap_const_lv2_0);
    shl_ln1118_s_fu_289_p3 <= (ap_port_reg_data_0_V_read & ap_const_lv5_0);
    shl_ln_fu_271_p3 <= (ap_port_reg_data_0_V_read & ap_const_lv7_0);
    sub_ln1118_22_fu_301_p2 <= std_logic_vector(unsigned(sub_ln1118_fu_283_p2) - unsigned(sext_ln1118_65_fu_297_p1));
    sub_ln1118_23_fu_332_p2 <= std_logic_vector(unsigned(ap_const_lv23_0) - unsigned(sext_ln1118_68_fu_328_p1));
    sub_ln1118_24_fu_350_p2 <= std_logic_vector(unsigned(sub_ln1118_23_fu_332_p2) - unsigned(sext_ln1118_69_fu_346_p1));
    sub_ln1118_25_fu_448_p2 <= std_logic_vector(unsigned(ap_const_lv24_0) - unsigned(sext_ln1118_72_fu_444_p1));
    sub_ln1118_26_fu_454_p2 <= std_logic_vector(unsigned(sub_ln1118_25_fu_448_p2) - unsigned(sext_ln1118_71_fu_432_p1));
    sub_ln1118_27_fu_494_p2 <= std_logic_vector(signed(sext_ln1118_76_fu_490_p1) - signed(sext_ln1118_75_fu_478_p1));
    sub_ln1118_28_fu_399_p2 <= std_logic_vector(signed(sext_ln1118_78_fu_395_p1) - signed(sext_ln1118_77_fu_383_p1));
    sub_ln1118_fu_283_p2 <= std_logic_vector(unsigned(ap_const_lv24_0) - unsigned(sext_ln1118_fu_279_p1));
    trunc_ln708_24_fu_356_p4 <= sub_ln1118_24_fu_350_p2(22 downto 8);
    trunc_ln708_25_fu_500_p4 <= sub_ln1118_27_fu_494_p2(22 downto 8);
    trunc_ln708_5_fu_460_p4 <= sub_ln1118_26_fu_454_p2(23 downto 8);
    trunc_ln708_s_fu_241_p1 <= grp_fu_167_p2(23 - 1 downto 0);
    trunc_ln_fu_307_p4 <= sub_ln1118_22_fu_301_p2(23 downto 8);
end behav;
