-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_resource_ap_fixed_ap_fixed_16_8_5_3_0_config11_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_0_V_read : IN STD_LOGIC_VECTOR (14 downto 0);
    data_1_V_read : IN STD_LOGIC_VECTOR (14 downto 0);
    data_2_V_read : IN STD_LOGIC_VECTOR (14 downto 0);
    data_3_V_read : IN STD_LOGIC_VECTOR (14 downto 0);
    data_4_V_read : IN STD_LOGIC_VECTOR (14 downto 0);
    data_5_V_read : IN STD_LOGIC_VECTOR (14 downto 0);
    data_6_V_read : IN STD_LOGIC_VECTOR (14 downto 0);
    data_7_V_read : IN STD_LOGIC_VECTOR (14 downto 0);
    data_8_V_read : IN STD_LOGIC_VECTOR (14 downto 0);
    data_9_V_read : IN STD_LOGIC_VECTOR (14 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dense_resource_ap_fixed_ap_fixed_16_8_5_3_0_config11_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv16_14 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln64_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal w11_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal w11_V_ce0 : STD_LOGIC;
    signal w11_V_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal do_init_reg_147 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_index3_reg_163 : STD_LOGIC_VECTOR (2 downto 0);
    signal data_0_V_read4_rewind_reg_178 : STD_LOGIC_VECTOR (14 downto 0);
    signal data_1_V_read5_rewind_reg_192 : STD_LOGIC_VECTOR (14 downto 0);
    signal data_2_V_read6_rewind_reg_206 : STD_LOGIC_VECTOR (14 downto 0);
    signal data_3_V_read7_rewind_reg_220 : STD_LOGIC_VECTOR (14 downto 0);
    signal data_4_V_read8_rewind_reg_234 : STD_LOGIC_VECTOR (14 downto 0);
    signal data_5_V_read9_rewind_reg_248 : STD_LOGIC_VECTOR (14 downto 0);
    signal data_6_V_read10_rewind_reg_262 : STD_LOGIC_VECTOR (14 downto 0);
    signal data_7_V_read11_rewind_reg_276 : STD_LOGIC_VECTOR (14 downto 0);
    signal data_8_V_read12_rewind_reg_290 : STD_LOGIC_VECTOR (14 downto 0);
    signal data_9_V_read13_rewind_reg_304 : STD_LOGIC_VECTOR (14 downto 0);
    signal res_V_write_assign1_reg_318 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_do_init_phi_fu_151_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_index_fu_457_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_index_reg_646 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln64_reg_651 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_0_V_fu_567_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_w_index3_phi_fu_167_p6 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_data_0_V_read4_phi_phi_fu_336_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_data_1_V_read5_phi_phi_fu_348_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_data_2_V_read6_phi_phi_fu_360_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_data_3_V_read7_phi_phi_fu_372_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_data_4_V_read8_phi_phi_fu_384_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_data_5_V_read9_phi_phi_fu_396_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_data_6_V_read10_phi_phi_fu_408_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_data_7_V_read11_phi_phi_fu_420_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_data_8_V_read12_phi_phi_fu_432_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_data_9_V_read13_phi_phi_fu_444_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter0_data_0_V_read4_phi_reg_332 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter1_data_0_V_read4_phi_reg_332 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter0_data_1_V_read5_phi_reg_344 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter1_data_1_V_read5_phi_reg_344 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter0_data_2_V_read6_phi_reg_356 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter1_data_2_V_read6_phi_reg_356 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter0_data_3_V_read7_phi_reg_368 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter1_data_3_V_read7_phi_reg_368 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter0_data_4_V_read8_phi_reg_380 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter1_data_4_V_read8_phi_reg_380 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter0_data_5_V_read9_phi_reg_392 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter1_data_5_V_read9_phi_reg_392 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter0_data_6_V_read10_phi_reg_404 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter1_data_6_V_read10_phi_reg_404 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter0_data_7_V_read11_phi_reg_416 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter1_data_7_V_read11_phi_reg_416 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter0_data_8_V_read12_phi_reg_428 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter1_data_8_V_read12_phi_reg_428 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter0_data_9_V_read13_phi_reg_440 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_reg_pp0_iter1_data_9_V_read13_phi_reg_440 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln77_fu_452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_ln_fu_469_p10 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln77_fu_491_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_fu_577_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal phi_ln77_s_fu_512_p10 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_3_fu_534_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln1118_858_fu_584_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln708_s_fu_552_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_fu_503_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_fu_561_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_fu_577_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln1118_858_fu_584_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln1118_858_fu_584_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln1118_fu_577_p10 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_condition_157 : BOOLEAN;
    signal ap_condition_42 : BOOLEAN;

    component myproject_mux_83_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (14 downto 0);
        din3 : IN STD_LOGIC_VECTOR (14 downto 0);
        din4 : IN STD_LOGIC_VECTOR (14 downto 0);
        din5 : IN STD_LOGIC_VECTOR (14 downto 0);
        din6 : IN STD_LOGIC_VECTOR (14 downto 0);
        din7 : IN STD_LOGIC_VECTOR (14 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component myproject_mul_mul_16s_15ns_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component myproject_mul_mul_15ns_9s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component dense_resource_ap_fixed_ap_fixed_16_8_5_3_0_config11_s_w1bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;



begin
    w11_V_U : component dense_resource_ap_fixed_ap_fixed_16_8_5_3_0_config11_s_w1bkb
    generic map (
        DataWidth => 25,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w11_V_address0,
        ce0 => w11_V_ce0,
        q0 => w11_V_q0);

    myproject_mux_83_15_1_1_U1861 : component myproject_mux_83_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        din2_WIDTH => 15,
        din3_WIDTH => 15,
        din4_WIDTH => 15,
        din5_WIDTH => 15,
        din6_WIDTH => 15,
        din7_WIDTH => 15,
        din8_WIDTH => 3,
        dout_WIDTH => 15)
    port map (
        din0 => ap_phi_mux_data_0_V_read4_phi_phi_fu_336_p4,
        din1 => ap_phi_mux_data_1_V_read5_phi_phi_fu_348_p4,
        din2 => ap_phi_mux_data_2_V_read6_phi_phi_fu_360_p4,
        din3 => ap_phi_mux_data_3_V_read7_phi_phi_fu_372_p4,
        din4 => ap_phi_mux_data_4_V_read8_phi_phi_fu_384_p4,
        din5 => ap_phi_mux_data_4_V_read8_phi_phi_fu_384_p4,
        din6 => ap_phi_mux_data_4_V_read8_phi_phi_fu_384_p4,
        din7 => ap_phi_mux_data_4_V_read8_phi_phi_fu_384_p4,
        din8 => w_index3_reg_163,
        dout => phi_ln_fu_469_p10);

    myproject_mux_83_15_1_1_U1862 : component myproject_mux_83_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        din2_WIDTH => 15,
        din3_WIDTH => 15,
        din4_WIDTH => 15,
        din5_WIDTH => 15,
        din6_WIDTH => 15,
        din7_WIDTH => 15,
        din8_WIDTH => 3,
        dout_WIDTH => 15)
    port map (
        din0 => ap_phi_mux_data_5_V_read9_phi_phi_fu_396_p4,
        din1 => ap_phi_mux_data_6_V_read10_phi_phi_fu_408_p4,
        din2 => ap_phi_mux_data_7_V_read11_phi_phi_fu_420_p4,
        din3 => ap_phi_mux_data_8_V_read12_phi_phi_fu_432_p4,
        din4 => ap_phi_mux_data_9_V_read13_phi_phi_fu_444_p4,
        din5 => ap_phi_mux_data_9_V_read13_phi_phi_fu_444_p4,
        din6 => ap_phi_mux_data_9_V_read13_phi_phi_fu_444_p4,
        din7 => ap_phi_mux_data_9_V_read13_phi_phi_fu_444_p4,
        din8 => w_index3_reg_163,
        dout => phi_ln77_s_fu_512_p10);

    myproject_mul_mul_16s_15ns_24_1_1_U1863 : component myproject_mul_mul_16s_15ns_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 24)
    port map (
        din0 => trunc_ln77_fu_491_p1,
        din1 => mul_ln1118_fu_577_p1,
        dout => mul_ln1118_fu_577_p2);

    myproject_mul_mul_15ns_9s_24_1_1_U1864 : component myproject_mul_mul_15ns_9s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 9,
        dout_WIDTH => 24)
    port map (
        din0 => mul_ln1118_858_fu_584_p0,
        din1 => tmp_3_fu_534_p4,
        dout => mul_ln1118_858_fu_584_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln64_reg_651 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv16_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln64_reg_651 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    ap_return_preg <= acc_0_V_fu_567_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_data_0_V_read4_phi_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_42)) then
                if ((ap_phi_mux_do_init_phi_fu_151_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_0_V_read4_phi_reg_332 <= data_0_V_read;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_0_V_read4_phi_reg_332 <= ap_phi_reg_pp0_iter0_data_0_V_read4_phi_reg_332;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_1_V_read5_phi_reg_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_42)) then
                if ((ap_phi_mux_do_init_phi_fu_151_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_1_V_read5_phi_reg_344 <= data_1_V_read;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_1_V_read5_phi_reg_344 <= ap_phi_reg_pp0_iter0_data_1_V_read5_phi_reg_344;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_2_V_read6_phi_reg_356_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_42)) then
                if ((ap_phi_mux_do_init_phi_fu_151_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_2_V_read6_phi_reg_356 <= data_2_V_read;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_2_V_read6_phi_reg_356 <= ap_phi_reg_pp0_iter0_data_2_V_read6_phi_reg_356;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_3_V_read7_phi_reg_368_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_42)) then
                if ((ap_phi_mux_do_init_phi_fu_151_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_3_V_read7_phi_reg_368 <= data_3_V_read;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_3_V_read7_phi_reg_368 <= ap_phi_reg_pp0_iter0_data_3_V_read7_phi_reg_368;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_4_V_read8_phi_reg_380_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_42)) then
                if ((ap_phi_mux_do_init_phi_fu_151_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_4_V_read8_phi_reg_380 <= data_4_V_read;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_4_V_read8_phi_reg_380 <= ap_phi_reg_pp0_iter0_data_4_V_read8_phi_reg_380;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_5_V_read9_phi_reg_392_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_42)) then
                if ((ap_phi_mux_do_init_phi_fu_151_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_5_V_read9_phi_reg_392 <= data_5_V_read;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_5_V_read9_phi_reg_392 <= ap_phi_reg_pp0_iter0_data_5_V_read9_phi_reg_392;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_6_V_read10_phi_reg_404_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_42)) then
                if ((ap_phi_mux_do_init_phi_fu_151_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_6_V_read10_phi_reg_404 <= data_6_V_read;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_6_V_read10_phi_reg_404 <= ap_phi_reg_pp0_iter0_data_6_V_read10_phi_reg_404;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_7_V_read11_phi_reg_416_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_42)) then
                if ((ap_phi_mux_do_init_phi_fu_151_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_7_V_read11_phi_reg_416 <= data_7_V_read;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_7_V_read11_phi_reg_416 <= ap_phi_reg_pp0_iter0_data_7_V_read11_phi_reg_416;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_8_V_read12_phi_reg_428_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_42)) then
                if ((ap_phi_mux_do_init_phi_fu_151_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_8_V_read12_phi_reg_428 <= data_8_V_read;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_8_V_read12_phi_reg_428 <= ap_phi_reg_pp0_iter0_data_8_V_read12_phi_reg_428;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_data_9_V_read13_phi_reg_440_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_42)) then
                if ((ap_phi_mux_do_init_phi_fu_151_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter1_data_9_V_read13_phi_reg_440 <= data_9_V_read;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_data_9_V_read13_phi_reg_440 <= ap_phi_reg_pp0_iter0_data_9_V_read13_phi_reg_440;
                end if;
            end if; 
        end if;
    end process;

    do_init_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln64_reg_651 = ap_const_lv1_0))) then 
                do_init_reg_147 <= ap_const_lv1_0;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln64_reg_651 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                do_init_reg_147 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    res_V_write_assign1_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln64_reg_651 = ap_const_lv1_0))) then 
                res_V_write_assign1_reg_318 <= acc_0_V_fu_567_p2;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln64_reg_651 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                res_V_write_assign1_reg_318 <= ap_const_lv16_14;
            end if; 
        end if;
    end process;

    w_index3_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln64_reg_651 = ap_const_lv1_0))) then 
                w_index3_reg_163 <= w_index_reg_646;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln64_reg_651 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                w_index3_reg_163 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln64_reg_651 = ap_const_lv1_0))) then
                data_0_V_read4_rewind_reg_178 <= ap_phi_mux_data_0_V_read4_phi_phi_fu_336_p4;
                data_1_V_read5_rewind_reg_192 <= ap_phi_mux_data_1_V_read5_phi_phi_fu_348_p4;
                data_2_V_read6_rewind_reg_206 <= ap_phi_mux_data_2_V_read6_phi_phi_fu_360_p4;
                data_3_V_read7_rewind_reg_220 <= ap_phi_mux_data_3_V_read7_phi_phi_fu_372_p4;
                data_4_V_read8_rewind_reg_234 <= ap_phi_mux_data_4_V_read8_phi_phi_fu_384_p4;
                data_5_V_read9_rewind_reg_248 <= ap_phi_mux_data_5_V_read9_phi_phi_fu_396_p4;
                data_6_V_read10_rewind_reg_262 <= ap_phi_mux_data_6_V_read10_phi_phi_fu_408_p4;
                data_7_V_read11_rewind_reg_276 <= ap_phi_mux_data_7_V_read11_phi_phi_fu_420_p4;
                data_8_V_read12_rewind_reg_290 <= ap_phi_mux_data_8_V_read12_phi_phi_fu_432_p4;
                data_9_V_read13_rewind_reg_304 <= ap_phi_mux_data_9_V_read13_phi_phi_fu_444_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln64_reg_651 <= icmp_ln64_fu_463_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                w_index_reg_646 <= w_index_fu_457_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_reset_idle_pp0 = ap_const_logic_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    acc_0_V_fu_567_p2 <= std_logic_vector(unsigned(res_V_write_assign1_reg_318) + unsigned(add_ln703_fu_561_p2));
    add_ln703_fu_561_p2 <= std_logic_vector(unsigned(trunc_ln708_s_fu_552_p4) + unsigned(trunc_ln_fu_503_p4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage0_11001 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage0_subdone <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_157_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_157 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_condition_42_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_42 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln64_reg_651, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln64_reg_651 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_data_0_V_read4_phi_phi_fu_336_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, do_init_reg_147, data_0_V_read4_rewind_reg_178, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_phi_reg_pp0_iter1_data_0_V_read4_phi_reg_332)
    begin
        if (((do_init_reg_147 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_data_0_V_read4_phi_phi_fu_336_p4 <= data_0_V_read4_rewind_reg_178;
        else 
            ap_phi_mux_data_0_V_read4_phi_phi_fu_336_p4 <= ap_phi_reg_pp0_iter1_data_0_V_read4_phi_reg_332;
        end if; 
    end process;


    ap_phi_mux_data_1_V_read5_phi_phi_fu_348_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, do_init_reg_147, data_1_V_read5_rewind_reg_192, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_phi_reg_pp0_iter1_data_1_V_read5_phi_reg_344)
    begin
        if (((do_init_reg_147 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_data_1_V_read5_phi_phi_fu_348_p4 <= data_1_V_read5_rewind_reg_192;
        else 
            ap_phi_mux_data_1_V_read5_phi_phi_fu_348_p4 <= ap_phi_reg_pp0_iter1_data_1_V_read5_phi_reg_344;
        end if; 
    end process;


    ap_phi_mux_data_2_V_read6_phi_phi_fu_360_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, do_init_reg_147, data_2_V_read6_rewind_reg_206, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_phi_reg_pp0_iter1_data_2_V_read6_phi_reg_356)
    begin
        if (((do_init_reg_147 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_data_2_V_read6_phi_phi_fu_360_p4 <= data_2_V_read6_rewind_reg_206;
        else 
            ap_phi_mux_data_2_V_read6_phi_phi_fu_360_p4 <= ap_phi_reg_pp0_iter1_data_2_V_read6_phi_reg_356;
        end if; 
    end process;


    ap_phi_mux_data_3_V_read7_phi_phi_fu_372_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, do_init_reg_147, data_3_V_read7_rewind_reg_220, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_phi_reg_pp0_iter1_data_3_V_read7_phi_reg_368)
    begin
        if (((do_init_reg_147 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_data_3_V_read7_phi_phi_fu_372_p4 <= data_3_V_read7_rewind_reg_220;
        else 
            ap_phi_mux_data_3_V_read7_phi_phi_fu_372_p4 <= ap_phi_reg_pp0_iter1_data_3_V_read7_phi_reg_368;
        end if; 
    end process;


    ap_phi_mux_data_4_V_read8_phi_phi_fu_384_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, do_init_reg_147, data_4_V_read8_rewind_reg_234, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_phi_reg_pp0_iter1_data_4_V_read8_phi_reg_380)
    begin
        if (((do_init_reg_147 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_data_4_V_read8_phi_phi_fu_384_p4 <= data_4_V_read8_rewind_reg_234;
        else 
            ap_phi_mux_data_4_V_read8_phi_phi_fu_384_p4 <= ap_phi_reg_pp0_iter1_data_4_V_read8_phi_reg_380;
        end if; 
    end process;


    ap_phi_mux_data_5_V_read9_phi_phi_fu_396_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, do_init_reg_147, data_5_V_read9_rewind_reg_248, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_phi_reg_pp0_iter1_data_5_V_read9_phi_reg_392)
    begin
        if (((do_init_reg_147 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_data_5_V_read9_phi_phi_fu_396_p4 <= data_5_V_read9_rewind_reg_248;
        else 
            ap_phi_mux_data_5_V_read9_phi_phi_fu_396_p4 <= ap_phi_reg_pp0_iter1_data_5_V_read9_phi_reg_392;
        end if; 
    end process;


    ap_phi_mux_data_6_V_read10_phi_phi_fu_408_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, do_init_reg_147, data_6_V_read10_rewind_reg_262, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_phi_reg_pp0_iter1_data_6_V_read10_phi_reg_404)
    begin
        if (((do_init_reg_147 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_data_6_V_read10_phi_phi_fu_408_p4 <= data_6_V_read10_rewind_reg_262;
        else 
            ap_phi_mux_data_6_V_read10_phi_phi_fu_408_p4 <= ap_phi_reg_pp0_iter1_data_6_V_read10_phi_reg_404;
        end if; 
    end process;


    ap_phi_mux_data_7_V_read11_phi_phi_fu_420_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, do_init_reg_147, data_7_V_read11_rewind_reg_276, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_phi_reg_pp0_iter1_data_7_V_read11_phi_reg_416)
    begin
        if (((do_init_reg_147 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_data_7_V_read11_phi_phi_fu_420_p4 <= data_7_V_read11_rewind_reg_276;
        else 
            ap_phi_mux_data_7_V_read11_phi_phi_fu_420_p4 <= ap_phi_reg_pp0_iter1_data_7_V_read11_phi_reg_416;
        end if; 
    end process;


    ap_phi_mux_data_8_V_read12_phi_phi_fu_432_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, do_init_reg_147, data_8_V_read12_rewind_reg_290, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_phi_reg_pp0_iter1_data_8_V_read12_phi_reg_428)
    begin
        if (((do_init_reg_147 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_data_8_V_read12_phi_phi_fu_432_p4 <= data_8_V_read12_rewind_reg_290;
        else 
            ap_phi_mux_data_8_V_read12_phi_phi_fu_432_p4 <= ap_phi_reg_pp0_iter1_data_8_V_read12_phi_reg_428;
        end if; 
    end process;


    ap_phi_mux_data_9_V_read13_phi_phi_fu_444_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, do_init_reg_147, data_9_V_read13_rewind_reg_304, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_phi_reg_pp0_iter1_data_9_V_read13_phi_reg_440)
    begin
        if (((do_init_reg_147 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_data_9_V_read13_phi_phi_fu_444_p4 <= data_9_V_read13_rewind_reg_304;
        else 
            ap_phi_mux_data_9_V_read13_phi_phi_fu_444_p4 <= ap_phi_reg_pp0_iter1_data_9_V_read13_phi_reg_440;
        end if; 
    end process;


    ap_phi_mux_do_init_phi_fu_151_p6_assign_proc : process(do_init_reg_147, icmp_ln64_reg_651, ap_condition_157)
    begin
        if ((ap_const_boolean_1 = ap_condition_157)) then
            if ((icmp_ln64_reg_651 = ap_const_lv1_1)) then 
                ap_phi_mux_do_init_phi_fu_151_p6 <= ap_const_lv1_1;
            elsif ((icmp_ln64_reg_651 = ap_const_lv1_0)) then 
                ap_phi_mux_do_init_phi_fu_151_p6 <= ap_const_lv1_0;
            else 
                ap_phi_mux_do_init_phi_fu_151_p6 <= do_init_reg_147;
            end if;
        else 
            ap_phi_mux_do_init_phi_fu_151_p6 <= do_init_reg_147;
        end if; 
    end process;


    ap_phi_mux_w_index3_phi_fu_167_p6_assign_proc : process(w_index3_reg_163, w_index_reg_646, icmp_ln64_reg_651, ap_condition_157)
    begin
        if ((ap_const_boolean_1 = ap_condition_157)) then
            if ((icmp_ln64_reg_651 = ap_const_lv1_1)) then 
                ap_phi_mux_w_index3_phi_fu_167_p6 <= ap_const_lv3_0;
            elsif ((icmp_ln64_reg_651 = ap_const_lv1_0)) then 
                ap_phi_mux_w_index3_phi_fu_167_p6 <= w_index_reg_646;
            else 
                ap_phi_mux_w_index3_phi_fu_167_p6 <= w_index3_reg_163;
            end if;
        else 
            ap_phi_mux_w_index3_phi_fu_167_p6 <= w_index3_reg_163;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_data_0_V_read4_phi_reg_332 <= "XXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_data_1_V_read5_phi_reg_344 <= "XXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_data_2_V_read6_phi_reg_356 <= "XXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_data_3_V_read7_phi_reg_368 <= "XXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_data_4_V_read8_phi_reg_380 <= "XXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_data_5_V_read9_phi_reg_392 <= "XXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_data_6_V_read10_phi_reg_404 <= "XXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_data_7_V_read11_phi_reg_416 <= "XXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_data_8_V_read12_phi_reg_428 <= "XXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_data_9_V_read13_phi_reg_440 <= "XXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(icmp_ln64_fu_463_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln64_fu_463_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln64_reg_651, acc_0_V_fu_567_p2, ap_enable_reg_pp0_iter1, ap_return_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln64_reg_651 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_return <= acc_0_V_fu_567_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    icmp_ln64_fu_463_p2 <= "1" when (ap_phi_mux_w_index3_phi_fu_167_p6 = ap_const_lv3_4) else "0";
    mul_ln1118_858_fu_584_p0 <= mul_ln1118_858_fu_584_p00(15 - 1 downto 0);
    mul_ln1118_858_fu_584_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln77_s_fu_512_p10),24));
    mul_ln1118_fu_577_p1 <= mul_ln1118_fu_577_p10(15 - 1 downto 0);
    mul_ln1118_fu_577_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln_fu_469_p10),24));
    tmp_3_fu_534_p4 <= w11_V_q0(24 downto 16);
    trunc_ln708_s_fu_552_p4 <= mul_ln1118_858_fu_584_p2(23 downto 8);
    trunc_ln77_fu_491_p1 <= w11_V_q0(16 - 1 downto 0);
    trunc_ln_fu_503_p4 <= mul_ln1118_fu_577_p2(23 downto 8);
    w11_V_address0 <= zext_ln77_fu_452_p1(3 - 1 downto 0);

    w11_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w11_V_ce0 <= ap_const_logic_1;
        else 
            w11_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    w_index_fu_457_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(ap_phi_mux_w_index3_phi_fu_167_p6));
    zext_ln77_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_w_index3_phi_fu_167_p6),64));
end behav;
