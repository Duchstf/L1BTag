// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "algo_b.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic algo_b::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic algo_b::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> algo_b::ap_ST_fsm_pp0_stage0 = "1";
const sc_lv<3> algo_b::ap_ST_fsm_pp0_stage1 = "10";
const sc_lv<3> algo_b::ap_ST_fsm_pp0_stage2 = "100";
const sc_lv<32> algo_b::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool algo_b::ap_const_boolean_1 = true;
const sc_lv<32> algo_b::ap_const_lv32_2 = "10";
const bool algo_b::ap_const_boolean_0 = false;
const sc_lv<24> algo_b::ap_const_lv24_64 = "1100100";
const sc_lv<32> algo_b::ap_const_lv32_8 = "1000";
const sc_lv<32> algo_b::ap_const_lv32_17 = "10111";

algo_b::algo_b(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_myproject_fu_321 = new myproject("grp_myproject_fu_321");
    grp_myproject_fu_321->ap_clk(ap_clk);
    grp_myproject_fu_321->ap_rst(ap_rst);
    grp_myproject_fu_321->ap_start(grp_myproject_fu_321_ap_start);
    grp_myproject_fu_321->ap_done(grp_myproject_fu_321_ap_done);
    grp_myproject_fu_321->ap_idle(grp_myproject_fu_321_ap_idle);
    grp_myproject_fu_321->ap_ready(grp_myproject_fu_321_ap_ready);
    grp_myproject_fu_321->conv1d_input_V_read(b_tag_input_V_make_inputs_10u_s_fu_328_ap_return);
    grp_myproject_fu_321->ap_return(grp_myproject_fu_321_ap_return);
    b_tag_input_V_make_inputs_10u_s_fu_328 = new make_inputs_10u_s("b_tag_input_V_make_inputs_10u_s_fu_328");
    b_tag_input_V_make_inputs_10u_s_fu_328->ap_ready(b_tag_input_V_make_inputs_10u_s_fu_328_ap_ready);
    b_tag_input_V_make_inputs_10u_s_fu_328->puppi_candidate_0_V_read(input_0_V);
    b_tag_input_V_make_inputs_10u_s_fu_328->puppi_candidate_1_V_read(input_1_V);
    b_tag_input_V_make_inputs_10u_s_fu_328->puppi_candidate_2_V_read(input_2_V);
    b_tag_input_V_make_inputs_10u_s_fu_328->puppi_candidate_3_V_read(input_3_V);
    b_tag_input_V_make_inputs_10u_s_fu_328->puppi_candidate_4_V_read(input_4_V);
    b_tag_input_V_make_inputs_10u_s_fu_328->puppi_candidate_5_V_read(input_5_V);
    b_tag_input_V_make_inputs_10u_s_fu_328->puppi_candidate_6_V_read(input_6_V);
    b_tag_input_V_make_inputs_10u_s_fu_328->puppi_candidate_7_V_read(input_7_V);
    b_tag_input_V_make_inputs_10u_s_fu_328->puppi_candidate_8_V_read(input_8_V);
    b_tag_input_V_make_inputs_10u_s_fu_328->puppi_candidate_9_V_read(input_9_V);
    b_tag_input_V_make_inputs_10u_s_fu_328->ap_return(b_tag_input_V_make_inputs_10u_s_fu_328_ap_return);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_block_pp0_stage1);

    SC_METHOD(thread_ap_block_pp0_stage1_11001);

    SC_METHOD(thread_ap_block_pp0_stage1_subdone);

    SC_METHOD(thread_ap_block_pp0_stage2);

    SC_METHOD(thread_ap_block_pp0_stage2_01001);

    SC_METHOD(thread_ap_block_pp0_stage2_11001);

    SC_METHOD(thread_ap_block_pp0_stage2_subdone);

    SC_METHOD(thread_ap_block_state10_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state11_pp0_stage1_iter3);

    SC_METHOD(thread_ap_block_state12_pp0_stage2_iter3);

    SC_METHOD(thread_ap_block_state13_pp0_stage0_iter4);

    SC_METHOD(thread_ap_block_state14_pp0_stage1_iter4);

    SC_METHOD(thread_ap_block_state15_pp0_stage2_iter4);

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_state2_pp0_stage1_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage2_iter0);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state5_pp0_stage1_iter1);

    SC_METHOD(thread_ap_block_state6_pp0_stage2_iter1);

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state8_pp0_stage1_iter2);

    SC_METHOD(thread_ap_block_state9_pp0_stage2_iter2);

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0_reg );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );

    SC_METHOD(thread_ap_idle_pp0_0to3);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );

    SC_METHOD(thread_ap_idle_pp0_1to4);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_11001 );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to3 );

    SC_METHOD(thread_grp_myproject_fu_321_ap_start);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_output_0_V);
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2_01001 );
    sensitive << ( sext_ln835_fu_373_p1 );

    SC_METHOD(thread_r_V_fu_357_p0);
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( r_V_fu_357_p00 );

    SC_METHOD(thread_r_V_fu_357_p00);
    sensitive << ( grp_myproject_fu_321_ap_return );

    SC_METHOD(thread_r_V_fu_357_p2);
    sensitive << ( r_V_fu_357_p0 );

    SC_METHOD(thread_sext_ln835_fu_373_p1);
    sensitive << ( tmp_fu_363_p4 );

    SC_METHOD(thread_tmp_fu_363_p4);
    sensitive << ( r_V_fu_357_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage2_subdone );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_idle_pp0_1to4 );
    sensitive << ( ap_block_pp0_stage1_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "algo_b_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, input_0_V, "(port)input_0_V");
    sc_trace(mVcdFile, input_1_V, "(port)input_1_V");
    sc_trace(mVcdFile, input_2_V, "(port)input_2_V");
    sc_trace(mVcdFile, input_3_V, "(port)input_3_V");
    sc_trace(mVcdFile, input_4_V, "(port)input_4_V");
    sc_trace(mVcdFile, input_5_V, "(port)input_5_V");
    sc_trace(mVcdFile, input_6_V, "(port)input_6_V");
    sc_trace(mVcdFile, input_7_V, "(port)input_7_V");
    sc_trace(mVcdFile, input_8_V, "(port)input_8_V");
    sc_trace(mVcdFile, input_9_V, "(port)input_9_V");
    sc_trace(mVcdFile, output_0_V, "(port)output_0_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage2, "ap_CS_fsm_pp0_stage2");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage2_iter0, "ap_block_state3_pp0_stage2_iter0");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage2_iter1, "ap_block_state6_pp0_stage2_iter1");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage2_iter2, "ap_block_state9_pp0_stage2_iter2");
    sc_trace(mVcdFile, ap_block_state12_pp0_stage2_iter3, "ap_block_state12_pp0_stage2_iter3");
    sc_trace(mVcdFile, ap_block_state15_pp0_stage2_iter4, "ap_block_state15_pp0_stage2_iter4");
    sc_trace(mVcdFile, ap_block_pp0_stage2_11001, "ap_block_pp0_stage2_11001");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0_reg, "ap_enable_reg_pp0_iter0_reg");
    sc_trace(mVcdFile, ap_block_pp0_stage2_subdone, "ap_block_pp0_stage2_subdone");
    sc_trace(mVcdFile, grp_myproject_fu_321_ap_start, "grp_myproject_fu_321_ap_start");
    sc_trace(mVcdFile, grp_myproject_fu_321_ap_done, "grp_myproject_fu_321_ap_done");
    sc_trace(mVcdFile, grp_myproject_fu_321_ap_idle, "grp_myproject_fu_321_ap_idle");
    sc_trace(mVcdFile, grp_myproject_fu_321_ap_ready, "grp_myproject_fu_321_ap_ready");
    sc_trace(mVcdFile, grp_myproject_fu_321_ap_return, "grp_myproject_fu_321_ap_return");
    sc_trace(mVcdFile, b_tag_input_V_make_inputs_10u_s_fu_328_ap_ready, "b_tag_input_V_make_inputs_10u_s_fu_328_ap_ready");
    sc_trace(mVcdFile, b_tag_input_V_make_inputs_10u_s_fu_328_ap_return, "b_tag_input_V_make_inputs_10u_s_fu_328_ap_return");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_block_pp0_stage1, "ap_block_pp0_stage1");
    sc_trace(mVcdFile, ap_block_pp0_stage2, "ap_block_pp0_stage2");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter1, "ap_block_state4_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter2, "ap_block_state7_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage0_iter3, "ap_block_state10_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state13_pp0_stage0_iter4, "ap_block_state13_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, ap_block_pp0_stage2_01001, "ap_block_pp0_stage2_01001");
    sc_trace(mVcdFile, r_V_fu_357_p0, "r_V_fu_357_p0");
    sc_trace(mVcdFile, r_V_fu_357_p2, "r_V_fu_357_p2");
    sc_trace(mVcdFile, tmp_fu_363_p4, "tmp_fu_363_p4");
    sc_trace(mVcdFile, sext_ln835_fu_373_p1, "sext_ln835_fu_373_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_idle_pp0_1to4, "ap_idle_pp0_1to4");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage1_iter0, "ap_block_state2_pp0_stage1_iter0");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage1_iter1, "ap_block_state5_pp0_stage1_iter1");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage1_iter2, "ap_block_state8_pp0_stage1_iter2");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage1_iter3, "ap_block_state11_pp0_stage1_iter3");
    sc_trace(mVcdFile, ap_block_state14_pp0_stage1_iter4, "ap_block_state14_pp0_stage1_iter4");
    sc_trace(mVcdFile, ap_block_pp0_stage1_subdone, "ap_block_pp0_stage1_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage1_11001, "ap_block_pp0_stage1_11001");
    sc_trace(mVcdFile, ap_idle_pp0_0to3, "ap_idle_pp0_0to3");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, r_V_fu_357_p00, "r_V_fu_357_p00");
#endif

    }
    mHdltvinHandle.open("algo_b.hdltvin.dat");
    mHdltvoutHandle.open("algo_b.hdltvout.dat");
}

algo_b::~algo_b() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_myproject_fu_321;
    delete b_tag_input_V_make_inputs_10u_s_fu_328;
}

void algo_b::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read())) {
            ap_enable_reg_pp0_iter0_reg = ap_start.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage2_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage2_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage2_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage2_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        }
    }
}

void algo_b::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void algo_b::thread_ap_CS_fsm_pp0_stage2() {
    ap_CS_fsm_pp0_stage2 = ap_CS_fsm.read()[2];
}

void algo_b::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void algo_b::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()));
}

void algo_b::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()));
}

void algo_b::thread_ap_block_pp0_stage1() {
    ap_block_pp0_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void algo_b::thread_ap_block_pp0_stage1_11001() {
    ap_block_pp0_stage1_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void algo_b::thread_ap_block_pp0_stage1_subdone() {
    ap_block_pp0_stage1_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void algo_b::thread_ap_block_pp0_stage2() {
    ap_block_pp0_stage2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void algo_b::thread_ap_block_pp0_stage2_01001() {
    ap_block_pp0_stage2_01001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void algo_b::thread_ap_block_pp0_stage2_11001() {
    ap_block_pp0_stage2_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void algo_b::thread_ap_block_pp0_stage2_subdone() {
    ap_block_pp0_stage2_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void algo_b::thread_ap_block_state10_pp0_stage0_iter3() {
    ap_block_state10_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void algo_b::thread_ap_block_state11_pp0_stage1_iter3() {
    ap_block_state11_pp0_stage1_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void algo_b::thread_ap_block_state12_pp0_stage2_iter3() {
    ap_block_state12_pp0_stage2_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void algo_b::thread_ap_block_state13_pp0_stage0_iter4() {
    ap_block_state13_pp0_stage0_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void algo_b::thread_ap_block_state14_pp0_stage1_iter4() {
    ap_block_state14_pp0_stage1_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void algo_b::thread_ap_block_state15_pp0_stage2_iter4() {
    ap_block_state15_pp0_stage2_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void algo_b::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read());
}

void algo_b::thread_ap_block_state2_pp0_stage1_iter0() {
    ap_block_state2_pp0_stage1_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void algo_b::thread_ap_block_state3_pp0_stage2_iter0() {
    ap_block_state3_pp0_stage2_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void algo_b::thread_ap_block_state4_pp0_stage0_iter1() {
    ap_block_state4_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void algo_b::thread_ap_block_state5_pp0_stage1_iter1() {
    ap_block_state5_pp0_stage1_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void algo_b::thread_ap_block_state6_pp0_stage2_iter1() {
    ap_block_state6_pp0_stage2_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void algo_b::thread_ap_block_state7_pp0_stage0_iter2() {
    ap_block_state7_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void algo_b::thread_ap_block_state8_pp0_stage1_iter2() {
    ap_block_state8_pp0_stage1_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void algo_b::thread_ap_block_state9_pp0_stage2_iter2() {
    ap_block_state9_pp0_stage2_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void algo_b::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void algo_b::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void algo_b::thread_ap_enable_reg_pp0_iter0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read())) {
        ap_enable_reg_pp0_iter0 = ap_start.read();
    } else {
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg.read();
    }
}

void algo_b::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void algo_b::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void algo_b::thread_ap_idle_pp0_0to3() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()))) {
        ap_idle_pp0_0to3 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to3 = ap_const_logic_0;
    }
}

void algo_b::thread_ap_idle_pp0_1to4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()))) {
        ap_idle_pp0_1to4 = ap_const_logic_1;
    } else {
        ap_idle_pp0_1to4 = ap_const_logic_0;
    }
}

void algo_b::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void algo_b::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to3.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void algo_b::thread_grp_myproject_fu_321_ap_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        grp_myproject_fu_321_ap_start = ap_const_logic_1;
    } else {
        grp_myproject_fu_321_ap_start = ap_const_logic_0;
    }
}

void algo_b::thread_output_0_V() {
    output_0_V = esl_sext<64,17>(sext_ln835_fu_373_p1.read());
}

void algo_b::thread_r_V_fu_357_p0() {
    r_V_fu_357_p0 =  (sc_lv<8>) (r_V_fu_357_p00.read());
}

void algo_b::thread_r_V_fu_357_p00() {
    r_V_fu_357_p00 = esl_zext<24,8>(grp_myproject_fu_321_ap_return.read());
}

void algo_b::thread_r_V_fu_357_p2() {
    r_V_fu_357_p2 = (!r_V_fu_357_p0.read().is_01() || !ap_const_lv24_64.is_01())? sc_lv<24>(): sc_biguint<8>(r_V_fu_357_p0.read()) * sc_biguint<24>(ap_const_lv24_64);
}

void algo_b::thread_sext_ln835_fu_373_p1() {
    sext_ln835_fu_373_p1 = esl_sext<17,16>(tmp_fu_363_p4.read());
}

void algo_b::thread_tmp_fu_363_p4() {
    tmp_fu_363_p4 = r_V_fu_357_p2.read().range(23, 8);
}

void algo_b::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_1to4.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 2 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            }
            break;
        case 4 : 
            if (((esl_seteq<1,1,1>(ap_block_pp0_stage2_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_reset_idle_pp0.read())) || (esl_seteq<1,1,1>(ap_block_pp0_stage2_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_reset_idle_pp0.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void algo_b::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_0_V\" :  \"" << input_0_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_1_V\" :  \"" << input_1_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_2_V\" :  \"" << input_2_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_3_V\" :  \"" << input_3_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_4_V\" :  \"" << input_4_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_5_V\" :  \"" << input_5_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_6_V\" :  \"" << input_6_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_7_V\" :  \"" << input_7_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_8_V\" :  \"" << input_8_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_9_V\" :  \"" << input_9_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_0_V\" :  \"" << output_0_V.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

