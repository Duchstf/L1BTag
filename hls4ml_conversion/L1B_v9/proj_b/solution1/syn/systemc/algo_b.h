// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _algo_b_HH_
#define _algo_b_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "myproject.h"
#include "make_inputs_10u_s.h"

namespace ap_rtl {

struct algo_b : public sc_module {
    // Port declarations 17
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<64> > input_0_V;
    sc_in< sc_lv<64> > input_1_V;
    sc_in< sc_lv<64> > input_2_V;
    sc_in< sc_lv<64> > input_3_V;
    sc_in< sc_lv<64> > input_4_V;
    sc_in< sc_lv<64> > input_5_V;
    sc_in< sc_lv<64> > input_6_V;
    sc_in< sc_lv<64> > input_7_V;
    sc_in< sc_lv<64> > input_8_V;
    sc_in< sc_lv<64> > input_9_V;
    sc_out< sc_lv<64> > output_0_V;


    // Module declarations
    algo_b(sc_module_name name);
    SC_HAS_PROCESS(algo_b);

    ~algo_b();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    myproject* grp_myproject_fu_321;
    make_inputs_10u_s* b_tag_input_V_make_inputs_10u_s_fu_328;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage2;
    sc_signal< bool > ap_block_state3_pp0_stage2_iter0;
    sc_signal< bool > ap_block_state6_pp0_stage2_iter1;
    sc_signal< bool > ap_block_state9_pp0_stage2_iter2;
    sc_signal< bool > ap_block_state12_pp0_stage2_iter3;
    sc_signal< bool > ap_block_state15_pp0_stage2_iter4;
    sc_signal< bool > ap_block_pp0_stage2_11001;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0_reg;
    sc_signal< bool > ap_block_pp0_stage2_subdone;
    sc_signal< sc_logic > grp_myproject_fu_321_ap_start;
    sc_signal< sc_logic > grp_myproject_fu_321_ap_done;
    sc_signal< sc_logic > grp_myproject_fu_321_ap_idle;
    sc_signal< sc_logic > grp_myproject_fu_321_ap_ready;
    sc_signal< sc_lv<8> > grp_myproject_fu_321_ap_return;
    sc_signal< sc_logic > b_tag_input_V_make_inputs_10u_s_fu_328_ap_ready;
    sc_signal< sc_lv<2080> > b_tag_input_V_make_inputs_10u_s_fu_328_ap_return;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< bool > ap_block_pp0_stage2;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state13_pp0_stage0_iter4;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< bool > ap_block_pp0_stage2_01001;
    sc_signal< sc_lv<8> > r_V_fu_357_p0;
    sc_signal< sc_lv<24> > r_V_fu_357_p2;
    sc_signal< sc_lv<16> > tmp_fu_363_p4;
    sc_signal< sc_lv<17> > sext_ln835_fu_373_p1;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_idle_pp0_1to4;
    sc_signal< bool > ap_block_state2_pp0_stage1_iter0;
    sc_signal< bool > ap_block_state5_pp0_stage1_iter1;
    sc_signal< bool > ap_block_state8_pp0_stage1_iter2;
    sc_signal< bool > ap_block_state11_pp0_stage1_iter3;
    sc_signal< bool > ap_block_state14_pp0_stage1_iter4;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_logic > ap_idle_pp0_0to3;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<24> > r_V_fu_357_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_pp0_stage1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage2;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<24> ap_const_lv24_64;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_17;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage2();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_pp0_stage2();
    void thread_ap_block_pp0_stage2_01001();
    void thread_ap_block_pp0_stage2_11001();
    void thread_ap_block_pp0_stage2_subdone();
    void thread_ap_block_state10_pp0_stage0_iter3();
    void thread_ap_block_state11_pp0_stage1_iter3();
    void thread_ap_block_state12_pp0_stage2_iter3();
    void thread_ap_block_state13_pp0_stage0_iter4();
    void thread_ap_block_state14_pp0_stage1_iter4();
    void thread_ap_block_state15_pp0_stage2_iter4();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage1_iter0();
    void thread_ap_block_state3_pp0_stage2_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_pp0_stage1_iter1();
    void thread_ap_block_state6_pp0_stage2_iter1();
    void thread_ap_block_state7_pp0_stage0_iter2();
    void thread_ap_block_state8_pp0_stage1_iter2();
    void thread_ap_block_state9_pp0_stage2_iter2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to3();
    void thread_ap_idle_pp0_1to4();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_grp_myproject_fu_321_ap_start();
    void thread_output_0_V();
    void thread_r_V_fu_357_p0();
    void thread_r_V_fu_357_p00();
    void thread_r_V_fu_357_p2();
    void thread_sext_ln835_fu_373_p1();
    void thread_tmp_fu_363_p4();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
