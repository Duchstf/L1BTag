// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pointwise_conv_1d_cl_0_0_0_0_0_0_Block_pointwise_conv_1d_cl_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        res_0_V,
        res_0_V_ap_vld,
        res_1_V,
        res_1_V_ap_vld,
        res_2_V,
        res_2_V_ap_vld,
        res_3_V,
        res_3_V_ap_vld,
        res_4_V,
        res_4_V_ap_vld,
        res_5_V,
        res_5_V_ap_vld,
        res_6_V,
        res_6_V_ap_vld,
        res_7_V,
        res_7_V_ap_vld,
        res_8_V,
        res_8_V_ap_vld,
        res_9_V,
        res_9_V_ap_vld,
        res_10_V,
        res_10_V_ap_vld,
        res_11_V,
        res_11_V_ap_vld,
        res_12_V,
        res_12_V_ap_vld,
        res_13_V,
        res_13_V_ap_vld,
        res_14_V,
        res_14_V_ap_vld,
        res_15_V,
        res_15_V_ap_vld,
        res_16_V,
        res_16_V_ap_vld,
        res_17_V,
        res_17_V_ap_vld,
        res_18_V,
        res_18_V_ap_vld,
        res_19_V,
        res_19_V_ap_vld,
        res_20_V,
        res_20_V_ap_vld,
        res_21_V,
        res_21_V_ap_vld,
        res_22_V,
        res_22_V_ap_vld,
        res_23_V,
        res_23_V_ap_vld,
        res_24_V,
        res_24_V_ap_vld,
        res_25_V,
        res_25_V_ap_vld,
        res_26_V,
        res_26_V_ap_vld,
        res_27_V,
        res_27_V_ap_vld,
        res_28_V,
        res_28_V_ap_vld,
        res_29_V,
        res_29_V_ap_vld,
        res_30_V,
        res_30_V_ap_vld,
        res_31_V,
        res_31_V_ap_vld,
        res_32_V,
        res_32_V_ap_vld,
        res_33_V,
        res_33_V_ap_vld,
        res_34_V,
        res_34_V_ap_vld,
        res_35_V,
        res_35_V_ap_vld,
        res_36_V,
        res_36_V_ap_vld,
        res_37_V,
        res_37_V_ap_vld,
        res_38_V,
        res_38_V_ap_vld,
        res_39_V,
        res_39_V_ap_vld,
        res_40_V,
        res_40_V_ap_vld,
        res_41_V,
        res_41_V_ap_vld,
        res_42_V,
        res_42_V_ap_vld,
        res_43_V,
        res_43_V_ap_vld,
        res_44_V,
        res_44_V_ap_vld,
        res_45_V,
        res_45_V_ap_vld,
        res_46_V,
        res_46_V_ap_vld,
        res_47_V,
        res_47_V_ap_vld,
        res_48_V,
        res_48_V_ap_vld,
        res_49_V,
        res_49_V_ap_vld,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        p_read11,
        p_read12,
        p_read13,
        p_read14,
        p_read15,
        p_read16,
        p_read17,
        p_read18,
        p_read19,
        p_read20,
        p_read21,
        p_read22,
        p_read23,
        p_read24,
        p_read25,
        p_read26,
        p_read27,
        p_read28,
        p_read29,
        p_read30,
        p_read31,
        p_read32,
        p_read33,
        p_read34,
        p_read35,
        p_read36,
        p_read37,
        p_read38,
        p_read39,
        p_read40,
        p_read41,
        p_read42,
        p_read43,
        p_read44,
        p_read45,
        p_read46,
        p_read47,
        p_read48,
        p_read49
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [15:0] res_0_V;
output   res_0_V_ap_vld;
output  [15:0] res_1_V;
output   res_1_V_ap_vld;
output  [15:0] res_2_V;
output   res_2_V_ap_vld;
output  [15:0] res_3_V;
output   res_3_V_ap_vld;
output  [15:0] res_4_V;
output   res_4_V_ap_vld;
output  [15:0] res_5_V;
output   res_5_V_ap_vld;
output  [15:0] res_6_V;
output   res_6_V_ap_vld;
output  [15:0] res_7_V;
output   res_7_V_ap_vld;
output  [15:0] res_8_V;
output   res_8_V_ap_vld;
output  [15:0] res_9_V;
output   res_9_V_ap_vld;
output  [15:0] res_10_V;
output   res_10_V_ap_vld;
output  [15:0] res_11_V;
output   res_11_V_ap_vld;
output  [15:0] res_12_V;
output   res_12_V_ap_vld;
output  [15:0] res_13_V;
output   res_13_V_ap_vld;
output  [15:0] res_14_V;
output   res_14_V_ap_vld;
output  [15:0] res_15_V;
output   res_15_V_ap_vld;
output  [15:0] res_16_V;
output   res_16_V_ap_vld;
output  [15:0] res_17_V;
output   res_17_V_ap_vld;
output  [15:0] res_18_V;
output   res_18_V_ap_vld;
output  [15:0] res_19_V;
output   res_19_V_ap_vld;
output  [15:0] res_20_V;
output   res_20_V_ap_vld;
output  [15:0] res_21_V;
output   res_21_V_ap_vld;
output  [15:0] res_22_V;
output   res_22_V_ap_vld;
output  [15:0] res_23_V;
output   res_23_V_ap_vld;
output  [15:0] res_24_V;
output   res_24_V_ap_vld;
output  [15:0] res_25_V;
output   res_25_V_ap_vld;
output  [15:0] res_26_V;
output   res_26_V_ap_vld;
output  [15:0] res_27_V;
output   res_27_V_ap_vld;
output  [15:0] res_28_V;
output   res_28_V_ap_vld;
output  [15:0] res_29_V;
output   res_29_V_ap_vld;
output  [15:0] res_30_V;
output   res_30_V_ap_vld;
output  [15:0] res_31_V;
output   res_31_V_ap_vld;
output  [15:0] res_32_V;
output   res_32_V_ap_vld;
output  [15:0] res_33_V;
output   res_33_V_ap_vld;
output  [15:0] res_34_V;
output   res_34_V_ap_vld;
output  [15:0] res_35_V;
output   res_35_V_ap_vld;
output  [15:0] res_36_V;
output   res_36_V_ap_vld;
output  [15:0] res_37_V;
output   res_37_V_ap_vld;
output  [15:0] res_38_V;
output   res_38_V_ap_vld;
output  [15:0] res_39_V;
output   res_39_V_ap_vld;
output  [15:0] res_40_V;
output   res_40_V_ap_vld;
output  [15:0] res_41_V;
output   res_41_V_ap_vld;
output  [15:0] res_42_V;
output   res_42_V_ap_vld;
output  [15:0] res_43_V;
output   res_43_V_ap_vld;
output  [15:0] res_44_V;
output   res_44_V_ap_vld;
output  [15:0] res_45_V;
output   res_45_V_ap_vld;
output  [15:0] res_46_V;
output   res_46_V_ap_vld;
output  [15:0] res_47_V;
output   res_47_V_ap_vld;
output  [15:0] res_48_V;
output   res_48_V_ap_vld;
output  [15:0] res_49_V;
output   res_49_V_ap_vld;
input  [15:0] p_read;
input  [15:0] p_read1;
input  [15:0] p_read2;
input  [15:0] p_read3;
input  [15:0] p_read4;
input  [15:0] p_read5;
input  [15:0] p_read6;
input  [15:0] p_read7;
input  [15:0] p_read8;
input  [15:0] p_read9;
input  [15:0] p_read10;
input  [15:0] p_read11;
input  [15:0] p_read12;
input  [15:0] p_read13;
input  [15:0] p_read14;
input  [15:0] p_read15;
input  [15:0] p_read16;
input  [15:0] p_read17;
input  [15:0] p_read18;
input  [15:0] p_read19;
input  [15:0] p_read20;
input  [15:0] p_read21;
input  [15:0] p_read22;
input  [15:0] p_read23;
input  [15:0] p_read24;
input  [15:0] p_read25;
input  [15:0] p_read26;
input  [15:0] p_read27;
input  [15:0] p_read28;
input  [15:0] p_read29;
input  [15:0] p_read30;
input  [15:0] p_read31;
input  [15:0] p_read32;
input  [15:0] p_read33;
input  [15:0] p_read34;
input  [15:0] p_read35;
input  [15:0] p_read36;
input  [15:0] p_read37;
input  [15:0] p_read38;
input  [15:0] p_read39;
input  [15:0] p_read40;
input  [15:0] p_read41;
input  [15:0] p_read42;
input  [15:0] p_read43;
input  [15:0] p_read44;
input  [15:0] p_read45;
input  [15:0] p_read46;
input  [15:0] p_read47;
input  [15:0] p_read48;
input  [15:0] p_read49;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[15:0] res_0_V;
reg res_0_V_ap_vld;
reg[15:0] res_1_V;
reg res_1_V_ap_vld;
reg[15:0] res_2_V;
reg res_2_V_ap_vld;
reg[15:0] res_3_V;
reg res_3_V_ap_vld;
reg[15:0] res_4_V;
reg res_4_V_ap_vld;
reg[15:0] res_5_V;
reg res_5_V_ap_vld;
reg[15:0] res_6_V;
reg res_6_V_ap_vld;
reg[15:0] res_7_V;
reg res_7_V_ap_vld;
reg[15:0] res_8_V;
reg res_8_V_ap_vld;
reg[15:0] res_9_V;
reg res_9_V_ap_vld;
reg[15:0] res_10_V;
reg res_10_V_ap_vld;
reg[15:0] res_11_V;
reg res_11_V_ap_vld;
reg[15:0] res_12_V;
reg res_12_V_ap_vld;
reg[15:0] res_13_V;
reg res_13_V_ap_vld;
reg[15:0] res_14_V;
reg res_14_V_ap_vld;
reg[15:0] res_15_V;
reg res_15_V_ap_vld;
reg[15:0] res_16_V;
reg res_16_V_ap_vld;
reg[15:0] res_17_V;
reg res_17_V_ap_vld;
reg[15:0] res_18_V;
reg res_18_V_ap_vld;
reg[15:0] res_19_V;
reg res_19_V_ap_vld;
reg[15:0] res_20_V;
reg res_20_V_ap_vld;
reg[15:0] res_21_V;
reg res_21_V_ap_vld;
reg[15:0] res_22_V;
reg res_22_V_ap_vld;
reg[15:0] res_23_V;
reg res_23_V_ap_vld;
reg[15:0] res_24_V;
reg res_24_V_ap_vld;
reg[15:0] res_25_V;
reg res_25_V_ap_vld;
reg[15:0] res_26_V;
reg res_26_V_ap_vld;
reg[15:0] res_27_V;
reg res_27_V_ap_vld;
reg[15:0] res_28_V;
reg res_28_V_ap_vld;
reg[15:0] res_29_V;
reg res_29_V_ap_vld;
reg[15:0] res_30_V;
reg res_30_V_ap_vld;
reg[15:0] res_31_V;
reg res_31_V_ap_vld;
reg[15:0] res_32_V;
reg res_32_V_ap_vld;
reg[15:0] res_33_V;
reg res_33_V_ap_vld;
reg[15:0] res_34_V;
reg res_34_V_ap_vld;
reg[15:0] res_35_V;
reg res_35_V_ap_vld;
reg[15:0] res_36_V;
reg res_36_V_ap_vld;
reg[15:0] res_37_V;
reg res_37_V_ap_vld;
reg[15:0] res_38_V;
reg res_38_V_ap_vld;
reg[15:0] res_39_V;
reg res_39_V_ap_vld;
reg[15:0] res_40_V;
reg res_40_V_ap_vld;
reg[15:0] res_41_V;
reg res_41_V_ap_vld;
reg[15:0] res_42_V;
reg res_42_V_ap_vld;
reg[15:0] res_43_V;
reg res_43_V_ap_vld;
reg[15:0] res_44_V;
reg res_44_V_ap_vld;
reg[15:0] res_45_V;
reg res_45_V_ap_vld;
reg[15:0] res_46_V;
reg res_46_V_ap_vld;
reg[15:0] res_47_V;
reg res_47_V_ap_vld;
reg[15:0] res_48_V;
reg res_48_V_ap_vld;
reg[15:0] res_49_V;
reg res_49_V_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
reg   [15:0] res_0_V_preg;
reg   [15:0] res_5_V_preg;
reg   [15:0] res_10_V_preg;
reg   [15:0] res_15_V_preg;
reg   [15:0] res_20_V_preg;
reg   [15:0] res_25_V_preg;
reg   [15:0] res_30_V_preg;
reg   [15:0] res_35_V_preg;
reg   [15:0] res_40_V_preg;
reg   [15:0] res_45_V_preg;
reg   [15:0] res_1_V_preg;
reg   [15:0] res_6_V_preg;
reg   [15:0] res_11_V_preg;
reg   [15:0] res_16_V_preg;
reg   [15:0] res_21_V_preg;
reg   [15:0] res_26_V_preg;
reg   [15:0] res_31_V_preg;
reg   [15:0] res_36_V_preg;
reg   [15:0] res_41_V_preg;
reg   [15:0] res_46_V_preg;
reg   [15:0] res_2_V_preg;
reg   [15:0] res_7_V_preg;
reg   [15:0] res_12_V_preg;
reg   [15:0] res_17_V_preg;
reg   [15:0] res_22_V_preg;
reg   [15:0] res_27_V_preg;
reg   [15:0] res_32_V_preg;
reg   [15:0] res_37_V_preg;
reg   [15:0] res_42_V_preg;
reg   [15:0] res_47_V_preg;
reg   [15:0] res_3_V_preg;
reg   [15:0] res_8_V_preg;
reg   [15:0] res_13_V_preg;
reg   [15:0] res_18_V_preg;
reg   [15:0] res_23_V_preg;
reg   [15:0] res_28_V_preg;
reg   [15:0] res_33_V_preg;
reg   [15:0] res_38_V_preg;
reg   [15:0] res_43_V_preg;
reg   [15:0] res_48_V_preg;
reg   [15:0] res_4_V_preg;
reg   [15:0] res_9_V_preg;
reg   [15:0] res_14_V_preg;
reg   [15:0] res_19_V_preg;
reg   [15:0] res_24_V_preg;
reg   [15:0] res_29_V_preg;
reg   [15:0] res_34_V_preg;
reg   [15:0] res_39_V_preg;
reg   [15:0] res_44_V_preg;
reg   [15:0] res_49_V_preg;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 res_0_V_preg = 16'd0;
#0 res_5_V_preg = 16'd0;
#0 res_10_V_preg = 16'd0;
#0 res_15_V_preg = 16'd0;
#0 res_20_V_preg = 16'd0;
#0 res_25_V_preg = 16'd0;
#0 res_30_V_preg = 16'd0;
#0 res_35_V_preg = 16'd0;
#0 res_40_V_preg = 16'd0;
#0 res_45_V_preg = 16'd0;
#0 res_1_V_preg = 16'd0;
#0 res_6_V_preg = 16'd0;
#0 res_11_V_preg = 16'd0;
#0 res_16_V_preg = 16'd0;
#0 res_21_V_preg = 16'd0;
#0 res_26_V_preg = 16'd0;
#0 res_31_V_preg = 16'd0;
#0 res_36_V_preg = 16'd0;
#0 res_41_V_preg = 16'd0;
#0 res_46_V_preg = 16'd0;
#0 res_2_V_preg = 16'd0;
#0 res_7_V_preg = 16'd0;
#0 res_12_V_preg = 16'd0;
#0 res_17_V_preg = 16'd0;
#0 res_22_V_preg = 16'd0;
#0 res_27_V_preg = 16'd0;
#0 res_32_V_preg = 16'd0;
#0 res_37_V_preg = 16'd0;
#0 res_42_V_preg = 16'd0;
#0 res_47_V_preg = 16'd0;
#0 res_3_V_preg = 16'd0;
#0 res_8_V_preg = 16'd0;
#0 res_13_V_preg = 16'd0;
#0 res_18_V_preg = 16'd0;
#0 res_23_V_preg = 16'd0;
#0 res_28_V_preg = 16'd0;
#0 res_33_V_preg = 16'd0;
#0 res_38_V_preg = 16'd0;
#0 res_43_V_preg = 16'd0;
#0 res_48_V_preg = 16'd0;
#0 res_4_V_preg = 16'd0;
#0 res_9_V_preg = 16'd0;
#0 res_14_V_preg = 16'd0;
#0 res_19_V_preg = 16'd0;
#0 res_24_V_preg = 16'd0;
#0 res_29_V_preg = 16'd0;
#0 res_34_V_preg = 16'd0;
#0 res_39_V_preg = 16'd0;
#0 res_44_V_preg = 16'd0;
#0 res_49_V_preg = 16'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_0_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_0_V_preg <= p_read;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_10_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_10_V_preg <= p_read2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_11_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_11_V_preg <= p_read12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_12_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_12_V_preg <= p_read22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_13_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_13_V_preg <= p_read32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_14_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_14_V_preg <= p_read42;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_15_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_15_V_preg <= p_read3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_16_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_16_V_preg <= p_read13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_17_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_17_V_preg <= p_read23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_18_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_18_V_preg <= p_read33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_19_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_19_V_preg <= p_read43;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_1_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_1_V_preg <= p_read10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_20_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_20_V_preg <= p_read4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_21_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_21_V_preg <= p_read14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_22_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_22_V_preg <= p_read24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_23_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_23_V_preg <= p_read34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_24_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_24_V_preg <= p_read44;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_25_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_25_V_preg <= p_read5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_26_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_26_V_preg <= p_read15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_27_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_27_V_preg <= p_read25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_28_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_28_V_preg <= p_read35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_29_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_29_V_preg <= p_read45;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_2_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_2_V_preg <= p_read20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_30_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_30_V_preg <= p_read6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_31_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_31_V_preg <= p_read16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_32_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_32_V_preg <= p_read26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_33_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_33_V_preg <= p_read36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_34_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_34_V_preg <= p_read46;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_35_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_35_V_preg <= p_read7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_36_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_36_V_preg <= p_read17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_37_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_37_V_preg <= p_read27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_38_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_38_V_preg <= p_read37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_39_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_39_V_preg <= p_read47;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_3_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_3_V_preg <= p_read30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_40_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_40_V_preg <= p_read8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_41_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_41_V_preg <= p_read18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_42_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_42_V_preg <= p_read28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_43_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_43_V_preg <= p_read38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_44_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_44_V_preg <= p_read48;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_45_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_45_V_preg <= p_read9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_46_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_46_V_preg <= p_read19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_47_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_47_V_preg <= p_read29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_48_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_48_V_preg <= p_read39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_49_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_49_V_preg <= p_read49;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_4_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_4_V_preg <= p_read40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_5_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_5_V_preg <= p_read1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_6_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_6_V_preg <= p_read11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_7_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_7_V_preg <= p_read21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_8_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_8_V_preg <= p_read31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        res_9_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            res_9_V_preg <= p_read41;
        end
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_0_V = p_read;
    end else begin
        res_0_V = res_0_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_0_V_ap_vld = 1'b1;
    end else begin
        res_0_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_10_V = p_read2;
    end else begin
        res_10_V = res_10_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_10_V_ap_vld = 1'b1;
    end else begin
        res_10_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_11_V = p_read12;
    end else begin
        res_11_V = res_11_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_11_V_ap_vld = 1'b1;
    end else begin
        res_11_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_12_V = p_read22;
    end else begin
        res_12_V = res_12_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_12_V_ap_vld = 1'b1;
    end else begin
        res_12_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_13_V = p_read32;
    end else begin
        res_13_V = res_13_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_13_V_ap_vld = 1'b1;
    end else begin
        res_13_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_14_V = p_read42;
    end else begin
        res_14_V = res_14_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_14_V_ap_vld = 1'b1;
    end else begin
        res_14_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_15_V = p_read3;
    end else begin
        res_15_V = res_15_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_15_V_ap_vld = 1'b1;
    end else begin
        res_15_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_16_V = p_read13;
    end else begin
        res_16_V = res_16_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_16_V_ap_vld = 1'b1;
    end else begin
        res_16_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_17_V = p_read23;
    end else begin
        res_17_V = res_17_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_17_V_ap_vld = 1'b1;
    end else begin
        res_17_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_18_V = p_read33;
    end else begin
        res_18_V = res_18_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_18_V_ap_vld = 1'b1;
    end else begin
        res_18_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_19_V = p_read43;
    end else begin
        res_19_V = res_19_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_19_V_ap_vld = 1'b1;
    end else begin
        res_19_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_1_V = p_read10;
    end else begin
        res_1_V = res_1_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_1_V_ap_vld = 1'b1;
    end else begin
        res_1_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_20_V = p_read4;
    end else begin
        res_20_V = res_20_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_20_V_ap_vld = 1'b1;
    end else begin
        res_20_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_21_V = p_read14;
    end else begin
        res_21_V = res_21_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_21_V_ap_vld = 1'b1;
    end else begin
        res_21_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_22_V = p_read24;
    end else begin
        res_22_V = res_22_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_22_V_ap_vld = 1'b1;
    end else begin
        res_22_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_23_V = p_read34;
    end else begin
        res_23_V = res_23_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_23_V_ap_vld = 1'b1;
    end else begin
        res_23_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_24_V = p_read44;
    end else begin
        res_24_V = res_24_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_24_V_ap_vld = 1'b1;
    end else begin
        res_24_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_25_V = p_read5;
    end else begin
        res_25_V = res_25_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_25_V_ap_vld = 1'b1;
    end else begin
        res_25_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_26_V = p_read15;
    end else begin
        res_26_V = res_26_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_26_V_ap_vld = 1'b1;
    end else begin
        res_26_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_27_V = p_read25;
    end else begin
        res_27_V = res_27_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_27_V_ap_vld = 1'b1;
    end else begin
        res_27_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_28_V = p_read35;
    end else begin
        res_28_V = res_28_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_28_V_ap_vld = 1'b1;
    end else begin
        res_28_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_29_V = p_read45;
    end else begin
        res_29_V = res_29_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_29_V_ap_vld = 1'b1;
    end else begin
        res_29_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_2_V = p_read20;
    end else begin
        res_2_V = res_2_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_2_V_ap_vld = 1'b1;
    end else begin
        res_2_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_30_V = p_read6;
    end else begin
        res_30_V = res_30_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_30_V_ap_vld = 1'b1;
    end else begin
        res_30_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_31_V = p_read16;
    end else begin
        res_31_V = res_31_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_31_V_ap_vld = 1'b1;
    end else begin
        res_31_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_32_V = p_read26;
    end else begin
        res_32_V = res_32_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_32_V_ap_vld = 1'b1;
    end else begin
        res_32_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_33_V = p_read36;
    end else begin
        res_33_V = res_33_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_33_V_ap_vld = 1'b1;
    end else begin
        res_33_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_34_V = p_read46;
    end else begin
        res_34_V = res_34_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_34_V_ap_vld = 1'b1;
    end else begin
        res_34_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_35_V = p_read7;
    end else begin
        res_35_V = res_35_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_35_V_ap_vld = 1'b1;
    end else begin
        res_35_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_36_V = p_read17;
    end else begin
        res_36_V = res_36_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_36_V_ap_vld = 1'b1;
    end else begin
        res_36_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_37_V = p_read27;
    end else begin
        res_37_V = res_37_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_37_V_ap_vld = 1'b1;
    end else begin
        res_37_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_38_V = p_read37;
    end else begin
        res_38_V = res_38_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_38_V_ap_vld = 1'b1;
    end else begin
        res_38_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_39_V = p_read47;
    end else begin
        res_39_V = res_39_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_39_V_ap_vld = 1'b1;
    end else begin
        res_39_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_3_V = p_read30;
    end else begin
        res_3_V = res_3_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_3_V_ap_vld = 1'b1;
    end else begin
        res_3_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_40_V = p_read8;
    end else begin
        res_40_V = res_40_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_40_V_ap_vld = 1'b1;
    end else begin
        res_40_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_41_V = p_read18;
    end else begin
        res_41_V = res_41_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_41_V_ap_vld = 1'b1;
    end else begin
        res_41_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_42_V = p_read28;
    end else begin
        res_42_V = res_42_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_42_V_ap_vld = 1'b1;
    end else begin
        res_42_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_43_V = p_read38;
    end else begin
        res_43_V = res_43_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_43_V_ap_vld = 1'b1;
    end else begin
        res_43_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_44_V = p_read48;
    end else begin
        res_44_V = res_44_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_44_V_ap_vld = 1'b1;
    end else begin
        res_44_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_45_V = p_read9;
    end else begin
        res_45_V = res_45_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_45_V_ap_vld = 1'b1;
    end else begin
        res_45_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_46_V = p_read19;
    end else begin
        res_46_V = res_46_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_46_V_ap_vld = 1'b1;
    end else begin
        res_46_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_47_V = p_read29;
    end else begin
        res_47_V = res_47_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_47_V_ap_vld = 1'b1;
    end else begin
        res_47_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_48_V = p_read39;
    end else begin
        res_48_V = res_48_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_48_V_ap_vld = 1'b1;
    end else begin
        res_48_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_49_V = p_read49;
    end else begin
        res_49_V = res_49_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_49_V_ap_vld = 1'b1;
    end else begin
        res_49_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_4_V = p_read40;
    end else begin
        res_4_V = res_4_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_4_V_ap_vld = 1'b1;
    end else begin
        res_4_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_5_V = p_read1;
    end else begin
        res_5_V = res_5_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_5_V_ap_vld = 1'b1;
    end else begin
        res_5_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_6_V = p_read11;
    end else begin
        res_6_V = res_6_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_6_V_ap_vld = 1'b1;
    end else begin
        res_6_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_7_V = p_read21;
    end else begin
        res_7_V = res_7_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_7_V_ap_vld = 1'b1;
    end else begin
        res_7_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_8_V = p_read31;
    end else begin
        res_8_V = res_8_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_8_V_ap_vld = 1'b1;
    end else begin
        res_8_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_9_V = p_read41;
    end else begin
        res_9_V = res_9_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_9_V_ap_vld = 1'b1;
    end else begin
        res_9_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

endmodule //pointwise_conv_1d_cl_0_0_0_0_0_0_Block_pointwise_conv_1d_cl_s
