// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module relu_ap_fixed_ap_ufixed_9_0_0_0_0_relu_config14_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_0_V_read,
        data_1_V_read,
        data_2_V_read,
        data_3_V_read,
        data_4_V_read,
        data_5_V_read,
        data_6_V_read,
        data_7_V_read,
        data_8_V_read,
        data_9_V_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] data_0_V_read;
input  [15:0] data_1_V_read;
input  [15:0] data_2_V_read;
input  [15:0] data_3_V_read;
input  [15:0] data_4_V_read;
input  [15:0] data_5_V_read;
input  [15:0] data_6_V_read;
input  [15:0] data_7_V_read;
input  [15:0] data_8_V_read;
input  [15:0] data_9_V_read;
output  [8:0] ap_return_0;
output  [8:0] ap_return_1;
output  [8:0] ap_return_2;
output  [8:0] ap_return_3;
output  [8:0] ap_return_4;
output  [8:0] ap_return_5;
output  [8:0] ap_return_6;
output  [8:0] ap_return_7;
output  [8:0] ap_return_8;
output  [8:0] ap_return_9;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[8:0] ap_return_0;
reg[8:0] ap_return_1;
reg[8:0] ap_return_2;
reg[8:0] ap_return_3;
reg[8:0] ap_return_4;
reg[8:0] ap_return_5;
reg[8:0] ap_return_6;
reg[8:0] ap_return_7;
reg[8:0] ap_return_8;
reg[8:0] ap_return_9;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
wire   [0:0] trunc_ln403_fu_144_p1;
wire   [8:0] zext_ln415_fu_156_p1;
wire   [8:0] trunc_ln_fu_134_p4;
wire   [8:0] add_ln415_fu_160_p2;
wire   [0:0] tmp_506_fu_166_p3;
wire   [0:0] tmp_505_fu_148_p3;
wire   [0:0] xor_ln416_fu_174_p2;
wire   [5:0] p_Result_s_fu_186_p4;
wire   [0:0] and_ln416_fu_180_p2;
wire   [0:0] icmp_ln879_fu_196_p2;
wire   [0:0] icmp_ln768_fu_202_p2;
wire   [0:0] select_ln777_fu_208_p3;
wire   [0:0] icmp_ln1494_fu_128_p2;
wire   [8:0] select_ln340_fu_216_p3;
wire   [0:0] trunc_ln403_249_fu_248_p1;
wire   [8:0] zext_ln415_249_fu_260_p1;
wire   [8:0] trunc_ln708_s_fu_238_p4;
wire   [8:0] add_ln415_249_fu_264_p2;
wire   [0:0] tmp_508_fu_270_p3;
wire   [0:0] tmp_507_fu_252_p3;
wire   [0:0] xor_ln416_249_fu_278_p2;
wire   [5:0] p_Result_12_1_fu_290_p4;
wire   [0:0] and_ln416_249_fu_284_p2;
wire   [0:0] icmp_ln879_249_fu_300_p2;
wire   [0:0] icmp_ln768_249_fu_306_p2;
wire   [0:0] select_ln777_249_fu_312_p3;
wire   [0:0] icmp_ln1494_1_fu_232_p2;
wire   [8:0] select_ln340_1_fu_320_p3;
wire   [0:0] trunc_ln403_250_fu_352_p1;
wire   [8:0] zext_ln415_250_fu_364_p1;
wire   [8:0] trunc_ln708_247_fu_342_p4;
wire   [8:0] add_ln415_250_fu_368_p2;
wire   [0:0] tmp_510_fu_374_p3;
wire   [0:0] tmp_509_fu_356_p3;
wire   [0:0] xor_ln416_250_fu_382_p2;
wire   [5:0] p_Result_12_2_fu_394_p4;
wire   [0:0] and_ln416_250_fu_388_p2;
wire   [0:0] icmp_ln879_250_fu_404_p2;
wire   [0:0] icmp_ln768_250_fu_410_p2;
wire   [0:0] select_ln777_250_fu_416_p3;
wire   [0:0] icmp_ln1494_2_fu_336_p2;
wire   [8:0] select_ln340_2_fu_424_p3;
wire   [0:0] trunc_ln403_251_fu_456_p1;
wire   [8:0] zext_ln415_251_fu_468_p1;
wire   [8:0] trunc_ln708_248_fu_446_p4;
wire   [8:0] add_ln415_251_fu_472_p2;
wire   [0:0] tmp_512_fu_478_p3;
wire   [0:0] tmp_511_fu_460_p3;
wire   [0:0] xor_ln416_251_fu_486_p2;
wire   [5:0] p_Result_12_3_fu_498_p4;
wire   [0:0] and_ln416_251_fu_492_p2;
wire   [0:0] icmp_ln879_251_fu_508_p2;
wire   [0:0] icmp_ln768_251_fu_514_p2;
wire   [0:0] select_ln777_251_fu_520_p3;
wire   [0:0] icmp_ln1494_3_fu_440_p2;
wire   [8:0] select_ln340_3_fu_528_p3;
wire   [0:0] trunc_ln403_252_fu_560_p1;
wire   [8:0] zext_ln415_252_fu_572_p1;
wire   [8:0] trunc_ln708_249_fu_550_p4;
wire   [8:0] add_ln415_252_fu_576_p2;
wire   [0:0] tmp_514_fu_582_p3;
wire   [0:0] tmp_513_fu_564_p3;
wire   [0:0] xor_ln416_252_fu_590_p2;
wire   [5:0] p_Result_12_4_fu_602_p4;
wire   [0:0] and_ln416_252_fu_596_p2;
wire   [0:0] icmp_ln879_252_fu_612_p2;
wire   [0:0] icmp_ln768_252_fu_618_p2;
wire   [0:0] select_ln777_252_fu_624_p3;
wire   [0:0] icmp_ln1494_4_fu_544_p2;
wire   [8:0] select_ln340_4_fu_632_p3;
wire   [0:0] trunc_ln403_253_fu_664_p1;
wire   [8:0] zext_ln415_253_fu_676_p1;
wire   [8:0] trunc_ln708_250_fu_654_p4;
wire   [8:0] add_ln415_253_fu_680_p2;
wire   [0:0] tmp_516_fu_686_p3;
wire   [0:0] tmp_515_fu_668_p3;
wire   [0:0] xor_ln416_253_fu_694_p2;
wire   [5:0] p_Result_12_5_fu_706_p4;
wire   [0:0] and_ln416_253_fu_700_p2;
wire   [0:0] icmp_ln879_253_fu_716_p2;
wire   [0:0] icmp_ln768_253_fu_722_p2;
wire   [0:0] select_ln777_253_fu_728_p3;
wire   [0:0] icmp_ln1494_5_fu_648_p2;
wire   [8:0] select_ln340_5_fu_736_p3;
wire   [0:0] trunc_ln403_254_fu_768_p1;
wire   [8:0] zext_ln415_254_fu_780_p1;
wire   [8:0] trunc_ln708_251_fu_758_p4;
wire   [8:0] add_ln415_254_fu_784_p2;
wire   [0:0] tmp_518_fu_790_p3;
wire   [0:0] tmp_517_fu_772_p3;
wire   [0:0] xor_ln416_254_fu_798_p2;
wire   [5:0] p_Result_12_6_fu_810_p4;
wire   [0:0] and_ln416_254_fu_804_p2;
wire   [0:0] icmp_ln879_254_fu_820_p2;
wire   [0:0] icmp_ln768_254_fu_826_p2;
wire   [0:0] select_ln777_254_fu_832_p3;
wire   [0:0] icmp_ln1494_6_fu_752_p2;
wire   [8:0] select_ln340_6_fu_840_p3;
wire   [0:0] trunc_ln403_255_fu_872_p1;
wire   [8:0] zext_ln415_255_fu_884_p1;
wire   [8:0] trunc_ln708_252_fu_862_p4;
wire   [8:0] add_ln415_255_fu_888_p2;
wire   [0:0] tmp_520_fu_894_p3;
wire   [0:0] tmp_519_fu_876_p3;
wire   [0:0] xor_ln416_255_fu_902_p2;
wire   [5:0] p_Result_12_7_fu_914_p4;
wire   [0:0] and_ln416_255_fu_908_p2;
wire   [0:0] icmp_ln879_255_fu_924_p2;
wire   [0:0] icmp_ln768_255_fu_930_p2;
wire   [0:0] select_ln777_255_fu_936_p3;
wire   [0:0] icmp_ln1494_7_fu_856_p2;
wire   [8:0] select_ln340_7_fu_944_p3;
wire   [0:0] trunc_ln403_256_fu_976_p1;
wire   [8:0] zext_ln415_256_fu_988_p1;
wire   [8:0] trunc_ln708_253_fu_966_p4;
wire   [8:0] add_ln415_256_fu_992_p2;
wire   [0:0] tmp_522_fu_998_p3;
wire   [0:0] tmp_521_fu_980_p3;
wire   [0:0] xor_ln416_256_fu_1006_p2;
wire   [5:0] p_Result_12_8_fu_1018_p4;
wire   [0:0] and_ln416_256_fu_1012_p2;
wire   [0:0] icmp_ln879_256_fu_1028_p2;
wire   [0:0] icmp_ln768_256_fu_1034_p2;
wire   [0:0] select_ln777_256_fu_1040_p3;
wire   [0:0] icmp_ln1494_8_fu_960_p2;
wire   [8:0] select_ln340_8_fu_1048_p3;
wire   [0:0] trunc_ln403_257_fu_1080_p1;
wire   [8:0] zext_ln415_257_fu_1092_p1;
wire   [8:0] trunc_ln708_254_fu_1070_p4;
wire   [8:0] add_ln415_257_fu_1096_p2;
wire   [0:0] tmp_524_fu_1102_p3;
wire   [0:0] tmp_523_fu_1084_p3;
wire   [0:0] xor_ln416_257_fu_1110_p2;
wire   [5:0] p_Result_12_9_fu_1122_p4;
wire   [0:0] and_ln416_257_fu_1116_p2;
wire   [0:0] icmp_ln879_257_fu_1132_p2;
wire   [0:0] icmp_ln768_257_fu_1138_p2;
wire   [0:0] select_ln777_257_fu_1144_p3;
wire   [0:0] icmp_ln1494_9_fu_1064_p2;
wire   [8:0] select_ln340_9_fu_1152_p3;
wire   [8:0] select_ln1494_fu_224_p3;
wire   [8:0] select_ln1494_249_fu_328_p3;
wire   [8:0] select_ln1494_250_fu_432_p3;
wire   [8:0] select_ln1494_251_fu_536_p3;
wire   [8:0] select_ln1494_252_fu_640_p3;
wire   [8:0] select_ln1494_253_fu_744_p3;
wire   [8:0] select_ln1494_254_fu_848_p3;
wire   [8:0] select_ln1494_255_fu_952_p3;
wire   [8:0] select_ln1494_256_fu_1056_p3;
wire   [8:0] select_ln1494_257_fu_1160_p3;
reg   [8:0] ap_return_0_preg;
reg   [8:0] ap_return_1_preg;
reg   [8:0] ap_return_2_preg;
reg   [8:0] ap_return_3_preg;
reg   [8:0] ap_return_4_preg;
reg   [8:0] ap_return_5_preg;
reg   [8:0] ap_return_6_preg;
reg   [8:0] ap_return_7_preg;
reg   [8:0] ap_return_8_preg;
reg   [8:0] ap_return_9_preg;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_return_0_preg = 9'd0;
#0 ap_return_1_preg = 9'd0;
#0 ap_return_2_preg = 9'd0;
#0 ap_return_3_preg = 9'd0;
#0 ap_return_4_preg = 9'd0;
#0 ap_return_5_preg = 9'd0;
#0 ap_return_6_preg = 9'd0;
#0 ap_return_7_preg = 9'd0;
#0 ap_return_8_preg = 9'd0;
#0 ap_return_9_preg = 9'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 9'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_0_preg <= select_ln1494_fu_224_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 9'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_1_preg <= select_ln1494_249_fu_328_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 9'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_2_preg <= select_ln1494_250_fu_432_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 9'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_3_preg <= select_ln1494_251_fu_536_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 9'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_4_preg <= select_ln1494_252_fu_640_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_5_preg <= 9'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_5_preg <= select_ln1494_253_fu_744_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_6_preg <= 9'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_6_preg <= select_ln1494_254_fu_848_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_7_preg <= 9'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_7_preg <= select_ln1494_255_fu_952_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_8_preg <= 9'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_8_preg <= select_ln1494_256_fu_1056_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_9_preg <= 9'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_9_preg <= select_ln1494_257_fu_1160_p3;
        end
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_0 = select_ln1494_fu_224_p3;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_1 = select_ln1494_249_fu_328_p3;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_2 = select_ln1494_250_fu_432_p3;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_3 = select_ln1494_251_fu_536_p3;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_4 = select_ln1494_252_fu_640_p3;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_5 = select_ln1494_253_fu_744_p3;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_6 = select_ln1494_254_fu_848_p3;
    end else begin
        ap_return_6 = ap_return_6_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_7 = select_ln1494_255_fu_952_p3;
    end else begin
        ap_return_7 = ap_return_7_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_8 = select_ln1494_256_fu_1056_p3;
    end else begin
        ap_return_8 = ap_return_8_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_9 = select_ln1494_257_fu_1160_p3;
    end else begin
        ap_return_9 = ap_return_9_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln415_249_fu_264_p2 = (zext_ln415_249_fu_260_p1 + trunc_ln708_s_fu_238_p4);

assign add_ln415_250_fu_368_p2 = (zext_ln415_250_fu_364_p1 + trunc_ln708_247_fu_342_p4);

assign add_ln415_251_fu_472_p2 = (zext_ln415_251_fu_468_p1 + trunc_ln708_248_fu_446_p4);

assign add_ln415_252_fu_576_p2 = (zext_ln415_252_fu_572_p1 + trunc_ln708_249_fu_550_p4);

assign add_ln415_253_fu_680_p2 = (zext_ln415_253_fu_676_p1 + trunc_ln708_250_fu_654_p4);

assign add_ln415_254_fu_784_p2 = (zext_ln415_254_fu_780_p1 + trunc_ln708_251_fu_758_p4);

assign add_ln415_255_fu_888_p2 = (zext_ln415_255_fu_884_p1 + trunc_ln708_252_fu_862_p4);

assign add_ln415_256_fu_992_p2 = (zext_ln415_256_fu_988_p1 + trunc_ln708_253_fu_966_p4);

assign add_ln415_257_fu_1096_p2 = (zext_ln415_257_fu_1092_p1 + trunc_ln708_254_fu_1070_p4);

assign add_ln415_fu_160_p2 = (zext_ln415_fu_156_p1 + trunc_ln_fu_134_p4);

assign and_ln416_249_fu_284_p2 = (xor_ln416_249_fu_278_p2 & tmp_507_fu_252_p3);

assign and_ln416_250_fu_388_p2 = (xor_ln416_250_fu_382_p2 & tmp_509_fu_356_p3);

assign and_ln416_251_fu_492_p2 = (xor_ln416_251_fu_486_p2 & tmp_511_fu_460_p3);

assign and_ln416_252_fu_596_p2 = (xor_ln416_252_fu_590_p2 & tmp_513_fu_564_p3);

assign and_ln416_253_fu_700_p2 = (xor_ln416_253_fu_694_p2 & tmp_515_fu_668_p3);

assign and_ln416_254_fu_804_p2 = (xor_ln416_254_fu_798_p2 & tmp_517_fu_772_p3);

assign and_ln416_255_fu_908_p2 = (xor_ln416_255_fu_902_p2 & tmp_519_fu_876_p3);

assign and_ln416_256_fu_1012_p2 = (xor_ln416_256_fu_1006_p2 & tmp_521_fu_980_p3);

assign and_ln416_257_fu_1116_p2 = (xor_ln416_257_fu_1110_p2 & tmp_523_fu_1084_p3);

assign and_ln416_fu_180_p2 = (xor_ln416_fu_174_p2 & tmp_505_fu_148_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign icmp_ln1494_1_fu_232_p2 = (($signed(data_1_V_read) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_2_fu_336_p2 = (($signed(data_2_V_read) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_3_fu_440_p2 = (($signed(data_3_V_read) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_4_fu_544_p2 = (($signed(data_4_V_read) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_5_fu_648_p2 = (($signed(data_5_V_read) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_6_fu_752_p2 = (($signed(data_6_V_read) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_7_fu_856_p2 = (($signed(data_7_V_read) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_8_fu_960_p2 = (($signed(data_8_V_read) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_9_fu_1064_p2 = (($signed(data_9_V_read) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_128_p2 = (($signed(data_0_V_read) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln768_249_fu_306_p2 = ((p_Result_12_1_fu_290_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_250_fu_410_p2 = ((p_Result_12_2_fu_394_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_251_fu_514_p2 = ((p_Result_12_3_fu_498_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_252_fu_618_p2 = ((p_Result_12_4_fu_602_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_253_fu_722_p2 = ((p_Result_12_5_fu_706_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_254_fu_826_p2 = ((p_Result_12_6_fu_810_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_255_fu_930_p2 = ((p_Result_12_7_fu_914_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_256_fu_1034_p2 = ((p_Result_12_8_fu_1018_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_257_fu_1138_p2 = ((p_Result_12_9_fu_1122_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_fu_202_p2 = ((p_Result_s_fu_186_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_249_fu_300_p2 = ((p_Result_12_1_fu_290_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_250_fu_404_p2 = ((p_Result_12_2_fu_394_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_251_fu_508_p2 = ((p_Result_12_3_fu_498_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_252_fu_612_p2 = ((p_Result_12_4_fu_602_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_253_fu_716_p2 = ((p_Result_12_5_fu_706_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_254_fu_820_p2 = ((p_Result_12_6_fu_810_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_255_fu_924_p2 = ((p_Result_12_7_fu_914_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_256_fu_1028_p2 = ((p_Result_12_8_fu_1018_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_257_fu_1132_p2 = ((p_Result_12_9_fu_1122_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_196_p2 = ((p_Result_s_fu_186_p4 == 6'd63) ? 1'b1 : 1'b0);

assign p_Result_12_1_fu_290_p4 = {{data_1_V_read[15:10]}};

assign p_Result_12_2_fu_394_p4 = {{data_2_V_read[15:10]}};

assign p_Result_12_3_fu_498_p4 = {{data_3_V_read[15:10]}};

assign p_Result_12_4_fu_602_p4 = {{data_4_V_read[15:10]}};

assign p_Result_12_5_fu_706_p4 = {{data_5_V_read[15:10]}};

assign p_Result_12_6_fu_810_p4 = {{data_6_V_read[15:10]}};

assign p_Result_12_7_fu_914_p4 = {{data_7_V_read[15:10]}};

assign p_Result_12_8_fu_1018_p4 = {{data_8_V_read[15:10]}};

assign p_Result_12_9_fu_1122_p4 = {{data_9_V_read[15:10]}};

assign p_Result_s_fu_186_p4 = {{data_0_V_read[15:10]}};

assign select_ln1494_249_fu_328_p3 = ((icmp_ln1494_1_fu_232_p2[0:0] === 1'b1) ? select_ln340_1_fu_320_p3 : 9'd0);

assign select_ln1494_250_fu_432_p3 = ((icmp_ln1494_2_fu_336_p2[0:0] === 1'b1) ? select_ln340_2_fu_424_p3 : 9'd0);

assign select_ln1494_251_fu_536_p3 = ((icmp_ln1494_3_fu_440_p2[0:0] === 1'b1) ? select_ln340_3_fu_528_p3 : 9'd0);

assign select_ln1494_252_fu_640_p3 = ((icmp_ln1494_4_fu_544_p2[0:0] === 1'b1) ? select_ln340_4_fu_632_p3 : 9'd0);

assign select_ln1494_253_fu_744_p3 = ((icmp_ln1494_5_fu_648_p2[0:0] === 1'b1) ? select_ln340_5_fu_736_p3 : 9'd0);

assign select_ln1494_254_fu_848_p3 = ((icmp_ln1494_6_fu_752_p2[0:0] === 1'b1) ? select_ln340_6_fu_840_p3 : 9'd0);

assign select_ln1494_255_fu_952_p3 = ((icmp_ln1494_7_fu_856_p2[0:0] === 1'b1) ? select_ln340_7_fu_944_p3 : 9'd0);

assign select_ln1494_256_fu_1056_p3 = ((icmp_ln1494_8_fu_960_p2[0:0] === 1'b1) ? select_ln340_8_fu_1048_p3 : 9'd0);

assign select_ln1494_257_fu_1160_p3 = ((icmp_ln1494_9_fu_1064_p2[0:0] === 1'b1) ? select_ln340_9_fu_1152_p3 : 9'd0);

assign select_ln1494_fu_224_p3 = ((icmp_ln1494_fu_128_p2[0:0] === 1'b1) ? select_ln340_fu_216_p3 : 9'd0);

assign select_ln340_1_fu_320_p3 = ((select_ln777_249_fu_312_p3[0:0] === 1'b1) ? add_ln415_249_fu_264_p2 : 9'd511);

assign select_ln340_2_fu_424_p3 = ((select_ln777_250_fu_416_p3[0:0] === 1'b1) ? add_ln415_250_fu_368_p2 : 9'd511);

assign select_ln340_3_fu_528_p3 = ((select_ln777_251_fu_520_p3[0:0] === 1'b1) ? add_ln415_251_fu_472_p2 : 9'd511);

assign select_ln340_4_fu_632_p3 = ((select_ln777_252_fu_624_p3[0:0] === 1'b1) ? add_ln415_252_fu_576_p2 : 9'd511);

assign select_ln340_5_fu_736_p3 = ((select_ln777_253_fu_728_p3[0:0] === 1'b1) ? add_ln415_253_fu_680_p2 : 9'd511);

assign select_ln340_6_fu_840_p3 = ((select_ln777_254_fu_832_p3[0:0] === 1'b1) ? add_ln415_254_fu_784_p2 : 9'd511);

assign select_ln340_7_fu_944_p3 = ((select_ln777_255_fu_936_p3[0:0] === 1'b1) ? add_ln415_255_fu_888_p2 : 9'd511);

assign select_ln340_8_fu_1048_p3 = ((select_ln777_256_fu_1040_p3[0:0] === 1'b1) ? add_ln415_256_fu_992_p2 : 9'd511);

assign select_ln340_9_fu_1152_p3 = ((select_ln777_257_fu_1144_p3[0:0] === 1'b1) ? add_ln415_257_fu_1096_p2 : 9'd511);

assign select_ln340_fu_216_p3 = ((select_ln777_fu_208_p3[0:0] === 1'b1) ? add_ln415_fu_160_p2 : 9'd511);

assign select_ln777_249_fu_312_p3 = ((and_ln416_249_fu_284_p2[0:0] === 1'b1) ? icmp_ln879_249_fu_300_p2 : icmp_ln768_249_fu_306_p2);

assign select_ln777_250_fu_416_p3 = ((and_ln416_250_fu_388_p2[0:0] === 1'b1) ? icmp_ln879_250_fu_404_p2 : icmp_ln768_250_fu_410_p2);

assign select_ln777_251_fu_520_p3 = ((and_ln416_251_fu_492_p2[0:0] === 1'b1) ? icmp_ln879_251_fu_508_p2 : icmp_ln768_251_fu_514_p2);

assign select_ln777_252_fu_624_p3 = ((and_ln416_252_fu_596_p2[0:0] === 1'b1) ? icmp_ln879_252_fu_612_p2 : icmp_ln768_252_fu_618_p2);

assign select_ln777_253_fu_728_p3 = ((and_ln416_253_fu_700_p2[0:0] === 1'b1) ? icmp_ln879_253_fu_716_p2 : icmp_ln768_253_fu_722_p2);

assign select_ln777_254_fu_832_p3 = ((and_ln416_254_fu_804_p2[0:0] === 1'b1) ? icmp_ln879_254_fu_820_p2 : icmp_ln768_254_fu_826_p2);

assign select_ln777_255_fu_936_p3 = ((and_ln416_255_fu_908_p2[0:0] === 1'b1) ? icmp_ln879_255_fu_924_p2 : icmp_ln768_255_fu_930_p2);

assign select_ln777_256_fu_1040_p3 = ((and_ln416_256_fu_1012_p2[0:0] === 1'b1) ? icmp_ln879_256_fu_1028_p2 : icmp_ln768_256_fu_1034_p2);

assign select_ln777_257_fu_1144_p3 = ((and_ln416_257_fu_1116_p2[0:0] === 1'b1) ? icmp_ln879_257_fu_1132_p2 : icmp_ln768_257_fu_1138_p2);

assign select_ln777_fu_208_p3 = ((and_ln416_fu_180_p2[0:0] === 1'b1) ? icmp_ln879_fu_196_p2 : icmp_ln768_fu_202_p2);

assign tmp_505_fu_148_p3 = data_0_V_read[32'd9];

assign tmp_506_fu_166_p3 = add_ln415_fu_160_p2[32'd8];

assign tmp_507_fu_252_p3 = data_1_V_read[32'd9];

assign tmp_508_fu_270_p3 = add_ln415_249_fu_264_p2[32'd8];

assign tmp_509_fu_356_p3 = data_2_V_read[32'd9];

assign tmp_510_fu_374_p3 = add_ln415_250_fu_368_p2[32'd8];

assign tmp_511_fu_460_p3 = data_3_V_read[32'd9];

assign tmp_512_fu_478_p3 = add_ln415_251_fu_472_p2[32'd8];

assign tmp_513_fu_564_p3 = data_4_V_read[32'd9];

assign tmp_514_fu_582_p3 = add_ln415_252_fu_576_p2[32'd8];

assign tmp_515_fu_668_p3 = data_5_V_read[32'd9];

assign tmp_516_fu_686_p3 = add_ln415_253_fu_680_p2[32'd8];

assign tmp_517_fu_772_p3 = data_6_V_read[32'd9];

assign tmp_518_fu_790_p3 = add_ln415_254_fu_784_p2[32'd8];

assign tmp_519_fu_876_p3 = data_7_V_read[32'd9];

assign tmp_520_fu_894_p3 = add_ln415_255_fu_888_p2[32'd8];

assign tmp_521_fu_980_p3 = data_8_V_read[32'd9];

assign tmp_522_fu_998_p3 = add_ln415_256_fu_992_p2[32'd8];

assign tmp_523_fu_1084_p3 = data_9_V_read[32'd9];

assign tmp_524_fu_1102_p3 = add_ln415_257_fu_1096_p2[32'd8];

assign trunc_ln403_249_fu_248_p1 = data_1_V_read[0:0];

assign trunc_ln403_250_fu_352_p1 = data_2_V_read[0:0];

assign trunc_ln403_251_fu_456_p1 = data_3_V_read[0:0];

assign trunc_ln403_252_fu_560_p1 = data_4_V_read[0:0];

assign trunc_ln403_253_fu_664_p1 = data_5_V_read[0:0];

assign trunc_ln403_254_fu_768_p1 = data_6_V_read[0:0];

assign trunc_ln403_255_fu_872_p1 = data_7_V_read[0:0];

assign trunc_ln403_256_fu_976_p1 = data_8_V_read[0:0];

assign trunc_ln403_257_fu_1080_p1 = data_9_V_read[0:0];

assign trunc_ln403_fu_144_p1 = data_0_V_read[0:0];

assign trunc_ln708_247_fu_342_p4 = {{data_2_V_read[9:1]}};

assign trunc_ln708_248_fu_446_p4 = {{data_3_V_read[9:1]}};

assign trunc_ln708_249_fu_550_p4 = {{data_4_V_read[9:1]}};

assign trunc_ln708_250_fu_654_p4 = {{data_5_V_read[9:1]}};

assign trunc_ln708_251_fu_758_p4 = {{data_6_V_read[9:1]}};

assign trunc_ln708_252_fu_862_p4 = {{data_7_V_read[9:1]}};

assign trunc_ln708_253_fu_966_p4 = {{data_8_V_read[9:1]}};

assign trunc_ln708_254_fu_1070_p4 = {{data_9_V_read[9:1]}};

assign trunc_ln708_s_fu_238_p4 = {{data_1_V_read[9:1]}};

assign trunc_ln_fu_134_p4 = {{data_0_V_read[9:1]}};

assign xor_ln416_249_fu_278_p2 = (tmp_508_fu_270_p3 ^ 1'd1);

assign xor_ln416_250_fu_382_p2 = (tmp_510_fu_374_p3 ^ 1'd1);

assign xor_ln416_251_fu_486_p2 = (tmp_512_fu_478_p3 ^ 1'd1);

assign xor_ln416_252_fu_590_p2 = (tmp_514_fu_582_p3 ^ 1'd1);

assign xor_ln416_253_fu_694_p2 = (tmp_516_fu_686_p3 ^ 1'd1);

assign xor_ln416_254_fu_798_p2 = (tmp_518_fu_790_p3 ^ 1'd1);

assign xor_ln416_255_fu_902_p2 = (tmp_520_fu_894_p3 ^ 1'd1);

assign xor_ln416_256_fu_1006_p2 = (tmp_522_fu_998_p3 ^ 1'd1);

assign xor_ln416_257_fu_1110_p2 = (tmp_524_fu_1102_p3 ^ 1'd1);

assign xor_ln416_fu_174_p2 = (tmp_506_fu_166_p3 ^ 1'd1);

assign zext_ln415_249_fu_260_p1 = trunc_ln403_249_fu_248_p1;

assign zext_ln415_250_fu_364_p1 = trunc_ln403_250_fu_352_p1;

assign zext_ln415_251_fu_468_p1 = trunc_ln403_251_fu_456_p1;

assign zext_ln415_252_fu_572_p1 = trunc_ln403_252_fu_560_p1;

assign zext_ln415_253_fu_676_p1 = trunc_ln403_253_fu_664_p1;

assign zext_ln415_254_fu_780_p1 = trunc_ln403_254_fu_768_p1;

assign zext_ln415_255_fu_884_p1 = trunc_ln403_255_fu_872_p1;

assign zext_ln415_256_fu_988_p1 = trunc_ln403_256_fu_976_p1;

assign zext_ln415_257_fu_1092_p1 = trunc_ln403_257_fu_1080_p1;

assign zext_ln415_fu_156_p1 = trunc_ln403_fu_144_p1;

endmodule //relu_ap_fixed_ap_ufixed_9_0_0_0_0_relu_config14_s
