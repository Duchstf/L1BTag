-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity dense_resource_rf_leq_nin_0_1_0_1_0_1_0_1_0_1_0_1_0_1_0_1bkb_rom is 
    generic(
             DWIDTH     : integer := 540; 
             AWIDTH     : integer := 3; 
             MEM_SIZE    : integer := 5
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of dense_resource_rf_leq_nin_0_1_0_1_0_1_0_1_0_1_0_1_0_1_0_1bkb_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (


    2 => "011111111000011101000011111010101010000111100001010100110100010000011011110110110101110001000010000000010101110000110111111110100001011010100011110010101000010100000010101100100011001000000111000010110101010001110101111100001000011101111101001001010110000011010111111011111101111000000111000000110011111111110001110111111010011111100101100100010101110000100110000101110000000111100000000110011111000000111111101110001000001010010000111001110000110010000100000110101010001010011111101011100000000001001000000110111100000000000110000000111100", 




begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity dense_resource_rf_leq_nin_0_1_0_1_0_1_0_1_0_1_0_1_0_1_0_1bkb is
    generic (
        DataWidth : INTEGER := 540;
        AddressRange : INTEGER := 5;
        AddressWidth : INTEGER := 3);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of dense_resource_rf_leq_nin_0_1_0_1_0_1_0_1_0_1_0_1_0_1_0_1bkb is
    component dense_resource_rf_leq_nin_0_1_0_1_0_1_0_1_0_1_0_1_0_1_0_1bkb_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    dense_resource_rf_leq_nin_0_1_0_1_0_1_0_1_0_1_0_1_0_1_0_1bkb_rom_U :  component dense_resource_rf_leq_nin_0_1_0_1_0_1_0_1_0_1_0_1_0_1_0_1bkb_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


